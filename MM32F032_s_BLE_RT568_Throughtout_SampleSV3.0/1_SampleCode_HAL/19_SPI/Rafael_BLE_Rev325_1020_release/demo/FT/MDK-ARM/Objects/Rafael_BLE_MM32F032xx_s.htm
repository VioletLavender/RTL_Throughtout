<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Rafael_BLE_MM32F032xx_s.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Rafael_BLE_MM32F032xx_s.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Oct 28 14:46:07 2020
<BR><P>
<H3>Maximum Stack Usage =        284 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; BleApp_Main &rArr; RT568_FTTestSelection &rArr; RT568_TxTest &rArr; RT568_SleepWakeupTest &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[11]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[be]">SysCtlDelay</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[be]">SysCtlDelay</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC1_COMP_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[25]">ATT_HDL_Rd_NULL</a> from profile_tab.o(i.ATT_HDL_Rd_NULL) referenced 39 times from profile_tab.o(.constdata)
 <LI><a href="#[24]">ATT_HDL_Wr_NULL</a> from profile_tab.o(i.ATT_HDL_Wr_NULL) referenced 39 times from profile_tab.o(.constdata)
 <LI><a href="#[1e]">CAN_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[e]">DMA1_Channel1_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[f]">DMA1_Channel2_3_IRQHandler</a> from spi.o(i.DMA1_Channel2_3_IRQHandler) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[10]">DMA1_Channel4_5_IRQHandler</a> from spi.o(i.DMA1_Channel4_5_IRQHandler) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[6c]">ECHC_LE_Ctrl_Pkt</a> from ll.o(i.ECHC_LE_Ctrl_Pkt) referenced from ll.o(.constdata)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from porting_misc.o(i.EXTI4_15_IRQHandler) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[27]">HCLL_Disconnect</a> from ll.o(i.HCLL_Disconnect) referenced from ll.o(.constdata)
 <LI><a href="#[2d]">HCLL_Host_Buffer_Size</a> from ll.o(i.HCLL_Host_Buffer_Size) referenced from ll.o(.constdata)
 <LI><a href="#[2e]">HCLL_Host_Num_of_Completed_Packets</a> from ll.o(i.HCLL_Host_Num_of_Completed_Packets) referenced from ll.o(.constdata)
 <LI><a href="#[5c]">HCLL_LE_ACL_Data_Pkt</a> from ll.o(i.HCLL_LE_ACL_Data_Pkt) referenced from ll.o(.constdata)
 <LI><a href="#[66]">HCLL_LE_ACL_Data_Pkt_Extend</a> from ll.o(i.HCLL_LE_ACL_Data_Pkt_Extend) referenced from ll.o(.constdata)
 <LI><a href="#[49]">HCLL_LE_Add_Device_to_White_List</a> from ll.o(i.HCLL_LE_Add_Device_to_White_List) referenced from ll.o(.constdata)
 <LI><a href="#[48]">HCLL_LE_Clear_White_List</a> from ll.o(i.HCLL_LE_Clear_White_List) referenced from ll.o(.constdata)
 <LI><a href="#[4b]">HCLL_LE_Conn_update</a> from ll.o(i.HCLL_LE_Conn_update) referenced from ll.o(.constdata)
 <LI><a href="#[45]">HCLL_LE_Create_Conn</a> from ll.o(i.HCLL_LE_Create_Conn) referenced from ll.o(.constdata)
 <LI><a href="#[46]">HCLL_LE_Create_conn_cancel</a> from ll.o(i.HCLL_LE_Create_conn_cancel) referenced from ll.o(.constdata)
 <LI><a href="#[5e]">HCLL_LE_Ctrl_Pkt</a> from ll.o(i.HCLL_LE_Ctrl_Pkt) referenced from ll.o(.constdata)
 <LI><a href="#[4f]">HCLL_LE_Encrypt</a> from ll.o(i.HCLL_LE_Encrypt) referenced from ll.o(.constdata)
 <LI><a href="#[53]">HCLL_LE_Long_term_key_req_neg_reply</a> from ll.o(i.HCLL_LE_Long_term_key_req_neg_reply) referenced from ll.o(.constdata)
 <LI><a href="#[52]">HCLL_LE_Long_term_key_req_reply</a> from ll.o(i.HCLL_LE_Long_term_key_req_reply) referenced from ll.o(.constdata)
 <LI><a href="#[50]">HCLL_LE_Rand</a> from ll.o(i.HCLL_LE_Rand) referenced from ll.o(.constdata)
 <LI><a href="#[3f]">HCLL_LE_Read_Adv_Ch_Tx_Pwr</a> from ll.o(i.HCLL_LE_Read_Adv_Ch_Tx_Pwr) referenced from ll.o(.constdata)
 <LI><a href="#[3b]">HCLL_LE_Read_Buffer_Size</a> from ll.o(i.HCLL_LE_Read_Buffer_Size) referenced from ll.o(.constdata)
 <LI><a href="#[3c]">HCLL_LE_Read_Local_Supported_Feat</a> from ll.o(i.HCLL_LE_Read_Local_Supported_Feat) referenced from ll.o(.constdata)
 <LI><a href="#[61]">HCLL_LE_Read_Phy</a> from ll.o(i.HCLL_LE_Read_Phy) referenced from ll.o(.constdata)
 <LI><a href="#[4e]">HCLL_LE_Read_Remote_Used_Feat</a> from ll.o(i.HCLL_LE_Read_Remote_Used_Feat) referenced from ll.o(.constdata)
 <LI><a href="#[47]">HCLL_LE_Read_White_List_Size</a> from ll.o(i.HCLL_LE_Read_White_List_Size) referenced from ll.o(.constdata)
 <LI><a href="#[4d]">HCLL_LE_Read_ch_map</a> from ll.o(i.HCLL_LE_Read_ch_map) referenced from ll.o(.constdata)
 <LI><a href="#[54]">HCLL_LE_Read_supported_states</a> from ll.o(i.HCLL_LE_Read_supported_states) referenced from ll.o(.constdata)
 <LI><a href="#[55]">HCLL_LE_Receiver_test</a> from ll.o(i.HCLL_LE_Receiver_test) referenced from ll.o(.constdata)
 <LI><a href="#[59]">HCLL_LE_Remote_conn_param_req_neg_reply</a> from ll.o(i.HCLL_LE_Remote_conn_param_req_neg_reply) referenced from ll.o(.constdata)
 <LI><a href="#[58]">HCLL_LE_Remote_conn_param_req_reply</a> from ll.o(i.HCLL_LE_Remote_conn_param_req_reply) referenced from ll.o(.constdata)
 <LI><a href="#[4a]">HCLL_LE_Rmv_Device_from_White_List</a> from ll.o(i.HCLL_LE_Rmv_Device_from_White_List) referenced from ll.o(.constdata)
 <LI><a href="#[40]">HCLL_LE_Set_Adv_Data</a> from ll.o(i.HCLL_LE_Set_Adv_Data) referenced from ll.o(.constdata)
 <LI><a href="#[3e]">HCLL_LE_Set_Adv_Param</a> from ll.o(i.HCLL_LE_Set_Adv_Param) referenced from ll.o(.constdata)
 <LI><a href="#[42]">HCLL_LE_Set_Advertise_Enable</a> from ll.o(i.HCLL_LE_Set_Advertise_Enable) referenced from ll.o(.constdata)
 <LI><a href="#[64]">HCLL_LE_Set_Data_Length</a> from ll.o(i.HCLL_LE_Set_Data_Length) referenced from ll.o(.constdata)
 <LI><a href="#[62]">HCLL_LE_Set_Default_Phy</a> from ll.o(i.HCLL_LE_Set_Default_Phy) referenced from ll.o(.constdata)
 <LI><a href="#[3a]">HCLL_LE_Set_Event_Mask</a> from ll.o(i.HCLL_LE_Set_Event_Mask) referenced from ll.o(.constdata)
 <LI><a href="#[4c]">HCLL_LE_Set_Host_Ch_Classification</a> from ll.o(i.HCLL_LE_Set_Host_Ch_Classification) referenced from ll.o(.constdata)
 <LI><a href="#[63]">HCLL_LE_Set_Phy</a> from ll.o(i.HCLL_LE_Set_Phy) referenced from ll.o(.constdata)
 <LI><a href="#[3d]">HCLL_LE_Set_Random_Address</a> from ll.o(i.HCLL_LE_Set_Random_Address) referenced from ll.o(.constdata)
 <LI><a href="#[41]">HCLL_LE_Set_Scan_Response_Data</a> from ll.o(i.HCLL_LE_Set_Scan_Response_Data) referenced from ll.o(.constdata)
 <LI><a href="#[44]">HCLL_LE_Set_scan_enable</a> from ll.o(i.HCLL_LE_Set_scan_enable) referenced from ll.o(.constdata)
 <LI><a href="#[43]">HCLL_LE_Set_scan_param</a> from ll.o(i.HCLL_LE_Set_scan_param) referenced from ll.o(.constdata)
 <LI><a href="#[51]">HCLL_LE_Start_encryption</a> from ll.o(i.HCLL_LE_Start_encryption) referenced from ll.o(.constdata)
 <LI><a href="#[57]">HCLL_LE_Test_end</a> from ll.o(i.HCLL_LE_Test_end) referenced from ll.o(.constdata)
 <LI><a href="#[56]">HCLL_LE_Transmitter_test</a> from ll.o(i.HCLL_LE_Transmitter_test) referenced from ll.o(.constdata)
 <LI><a href="#[38]">HCLL_Read_BD_Addr</a> from ll.o(i.HCLL_Read_BD_Addr) referenced from ll.o(.constdata)
 <LI><a href="#[30]">HCLL_Read_Le_Host_Support</a> from ll.o(i.HCLL_Read_Le_Host_Support) referenced from ll.o(.constdata)
 <LI><a href="#[35]">HCLL_Read_Local_Supported_Cmd</a> from ll.o(i.HCLL_Read_Local_Supported_Cmd) referenced from ll.o(.constdata)
 <LI><a href="#[36]">HCLL_Read_Local_Supported_Feat</a> from ll.o(i.HCLL_Read_Local_Supported_Feat) referenced from ll.o(.constdata)
 <LI><a href="#[34]">HCLL_Read_Local_Ver_Info</a> from ll.o(i.HCLL_Read_Local_Ver_Info) referenced from ll.o(.constdata)
 <LI><a href="#[28]">HCLL_Read_Remote_Ver_Info</a> from ll.o(i.HCLL_Read_Remote_Ver_Info) referenced from ll.o(.constdata)
 <LI><a href="#[2b]">HCLL_Read_Transmit_Pwr_Level</a> from ll.o(i.HCLL_Read_Transmit_Pwr_Level) referenced from ll.o(.constdata)
 <LI><a href="#[32]">HCLL_Read_authen_payload_timeout</a> from ll.o(i.HCLL_Read_authen_payload_timeout) referenced from ll.o(.constdata)
 <LI><a href="#[37]">HCLL_Read_buffer_size</a> from ll.o(i.HCLL_Read_buffer_size) referenced from ll.o(.constdata)
 <LI><a href="#[39]">HCLL_Read_rssi</a> from ll.o(i.HCLL_Read_rssi) referenced from ll.o(.constdata)
 <LI><a href="#[2a]">HCLL_Reset</a> from ll.o(i.HCLL_Reset) referenced from ll.o(.constdata)
 <LI><a href="#[2c]">HCLL_Set_Ctrler_to_Host_Flow_Ctrl</a> from ll.o(i.HCLL_Set_Ctrler_to_Host_Flow_Ctrl) referenced from ll.o(.constdata)
 <LI><a href="#[29]">HCLL_Set_Event_Mask</a> from ll.o(i.HCLL_Set_Event_Mask) referenced from ll.o(.constdata)
 <LI><a href="#[2f]">HCLL_Set_Event_Mask_Page_2</a> from ll.o(i.HCLL_Set_Event_Mask_Page_2) referenced from ll.o(.constdata)
 <LI><a href="#[31]">HCLL_Write_Le_Host_Support</a> from ll.o(i.HCLL_Write_Le_Host_Support) referenced from ll.o(.constdata)
 <LI><a href="#[33]">HCLL_Write_authen_payload_timeout</a> from ll.o(i.HCLL_Write_authen_payload_timeout) referenced from ll.o(.constdata)
 <LI><a href="#[8c]">HSPF_Att_Read</a> from host.o(i.HSPF_Att_Read) referenced from host.o(.constdata)
 <LI><a href="#[8b]">HSPF_Att_Write</a> from host.o(i.HSPF_Att_Write) referenced from host.o(.constdata)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[19]">I2C1_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[70]">LLEC_LE_CCM_Manual</a> from ll.o(i.LLEC_LE_CCM_Manual) referenced from ll.o(.constdata)
 <LI><a href="#[68]">LLEC_LE_Encrypt</a> from ll.o(i.LLEC_LE_Encrypt) referenced from ll.o(.constdata)
 <LI><a href="#[6b]">LLEC_LE_Long_term_key_req_reply</a> from ll.o(i.LLEC_LE_Long_term_key_req_reply) referenced from ll.o(.constdata)
 <LI><a href="#[69]">LLEC_LE_Rand</a> from ll.o(i.LLEC_LE_Rand) referenced from ll.o(.constdata)
 <LI><a href="#[6a]">LLEC_LE_Start_encryption</a> from ll.o(i.LLEC_LE_Start_encryption) referenced from ll.o(.constdata)
 <LI><a href="#[5b]">LLHC_ERR_CODE_Invalid_Lmp_Parameters</a> from ll.o(i.LLHC_ERR_CODE_Invalid_Lmp_Parameters) referenced from ll.o(.constdata)
 <LI><a href="#[5a]">LLHC_ERR_CODE_Unknown_Hci_Command</a> from ll.o(i.LLHC_ERR_CODE_Unknown_Hci_Command) referenced from ll.o(.constdata)
 <LI><a href="#[5d]">LLHC_LE_Ctrl_Pkt</a> from ll.o(i.LLHC_LE_Ctrl_Pkt) referenced from ll.o(.constdata)
 <LI><a href="#[67]">MEC_HCI_Null</a> from ll.o(i.MEC_HCI_Null) referenced from ll.o(.constdata)
 <LI><a href="#[81]">MHC_Event_Authen_Payload_Timeout_Expired</a> from hci.o(i.MHC_Event_Authen_Payload_Timeout_Expired) referenced from hci.o(.constdata)
 <LI><a href="#[72]">MHC_Event_Cmd_Complete</a> from hci.o(i.MHC_Event_Cmd_Complete) referenced from hci.o(.constdata)
 <LI><a href="#[73]">MHC_Event_Cmd_Status</a> from hci.o(i.MHC_Event_Cmd_Status) referenced from hci.o(.constdata)
 <LI><a href="#[79]">MHC_Event_Data_Buffer_Overflow</a> from hci.o(i.MHC_Event_Data_Buffer_Overflow) referenced from hci.o(.constdata)
 <LI><a href="#[74]">MHC_Event_Disconn_Complete</a> from hci.o(i.MHC_Event_Disconn_Complete) referenced from hci.o(.constdata)
 <LI><a href="#[77]">MHC_Event_Encrypt_Change</a> from hci.o(i.MHC_Event_Encrypt_Change) referenced from hci.o(.constdata)
 <LI><a href="#[78]">MHC_Event_Encrypt_Key_Refresh_Complete</a> from hci.o(i.MHC_Event_Encrypt_Key_Refresh_Complete) referenced from hci.o(.constdata)
 <LI><a href="#[83]">MHC_Event_HCI_Raw</a> from hci.o(i.MHC_Event_HCI_Raw) referenced from hci.o(.constdata)
 <LI><a href="#[7a]">MHC_Event_Hardware_Error</a> from hci.o(i.MHC_Event_Hardware_Error) referenced from hci.o(.constdata)
 <LI><a href="#[7c]">MHC_Event_Le_Adv_Report</a> from hci.o(i.MHC_Event_Le_Adv_Report) referenced from hci.o(.constdata)
 <LI><a href="#[7b]">MHC_Event_Le_Conn_Complete</a> from hci.o(i.MHC_Event_Le_Conn_Complete) referenced from hci.o(.constdata)
 <LI><a href="#[7d]">MHC_Event_Le_Conn_Update_Complete</a> from hci.o(i.MHC_Event_Le_Conn_Update_Complete) referenced from hci.o(.constdata)
 <LI><a href="#[84]">MHC_Event_Le_Data_Length_Change</a> from hci.o(i.MHC_Event_Le_Data_Length_Change) referenced from hci.o(.constdata)
 <LI><a href="#[7f]">MHC_Event_Le_Long_Term_Key_Req</a> from hci.o(i.MHC_Event_Le_Long_Term_Key_Req) referenced from hci.o(.constdata)
 <LI><a href="#[85]">MHC_Event_Le_PHY_Update_Complete</a> from hci.o(i.MHC_Event_Le_PHY_Update_Complete) referenced from hci.o(.constdata)
 <LI><a href="#[7e]">MHC_Event_Le_Read_Remote_Used_Features_Complete</a> from hci.o(i.MHC_Event_Le_Read_Remote_Used_Features_Complete) referenced from hci.o(.constdata)
 <LI><a href="#[80]">MHC_Event_Le_Remote_Conn_param_Req_Event</a> from hci.o(i.MHC_Event_Le_Remote_Conn_param_Req_Event) referenced from hci.o(.constdata)
 <LI><a href="#[87]">MHC_Event_Le_Wait_Passkey_Confrim</a> from hci.o(i.MHC_Event_Le_Wait_Passkey_Confrim) referenced from hci.o(.constdata)
 <LI><a href="#[71]">MHC_Event_Null</a> from hci.o(i.MHC_Event_Null) referenced from hci.o(.constdata)
 <LI><a href="#[75]">MHC_Event_Num_Of_Completed_Pckts</a> from hci.o(i.MHC_Event_Num_Of_Completed_Pckts) referenced from hci.o(.constdata)
 <LI><a href="#[76]">MHC_Event_Read_Remote_Ver_Info_Complete</a> from hci.o(i.MHC_Event_Read_Remote_Ver_Info_Complete) referenced from hci.o(.constdata)
 <LI><a href="#[86]">MHC_Event_STK_Gen_Method</a> from hci.o(i.MHC_Event_STK_Gen_Method) referenced from hci.o(.constdata)
 <LI><a href="#[88]">MHC_Evnet_Auth_Status</a> from hci.o(i.MHC_Evnet_Auth_Status) referenced from hci.o(.constdata)
 <LI><a href="#[82]">MHC_LE_ACL_Data_Pkt</a> from hci.o(i.MHC_LE_ACL_Data_Pkt) referenced from hci.o(.constdata)
 <LI><a href="#[89]">MHC_LE_ACL_Data_Pkt_Extend</a> from hci.o(i.MHC_LE_ACL_Data_Pkt_Extend) referenced from hci.o(.constdata)
 <LI><a href="#[8a]">MHS_Event_Null</a> from host.o(i.MHS_Event_Null) referenced from host.o(.constdata)
 <LI><a href="#[8d]">ML2CAP_Event_Null</a> from l2cap.o(i.ML2CAP_Event_Null) referenced from l2cap.o(.constdata)
 <LI><a href="#[26]">MLL_HCI_Null</a> from ll.o(i.MLL_HCI_Null) referenced from ll.o(.constdata)
 <LI><a href="#[65]">MLL_LE_Ctrl_Pkt</a> from ll.o(i.MLL_LE_Ctrl_Pkt) referenced from ll.o(.constdata)
 <LI><a href="#[5f]">MLL_LL_CHN_Map_Upd</a> from ll.o(i.MLL_LL_CHN_Map_Upd) referenced from ll.o(.constdata)
 <LI><a href="#[60]">MLL_LL_Enc_Req</a> from ll.o(i.MLL_LL_Enc_Req) referenced from ll.o(.constdata)
 <LI><a href="#[1]">NMI_Handler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[94]">Prcss_BLE_CODE_SMP_Encryption_Information</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Encryption_Information) referenced from mmi.o(.constdata)
 <LI><a href="#[97]">Prcss_BLE_CODE_SMP_Identity_Address_Information</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Identity_Address_Information) referenced from mmi.o(.constdata)
 <LI><a href="#[96]">Prcss_BLE_CODE_SMP_Identity_Information</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Identity_Information) referenced from mmi.o(.constdata)
 <LI><a href="#[95]">Prcss_BLE_CODE_SMP_Master_Identification</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Master_Identification) referenced from mmi.o(.constdata)
 <LI><a href="#[91]">Prcss_BLE_CODE_SMP_Pairing_Confirm</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Confirm) referenced from mmi.o(.constdata)
 <LI><a href="#[93]">Prcss_BLE_CODE_SMP_Pairing_Failed</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Failed) referenced from mmi.o(.constdata)
 <LI><a href="#[92]">Prcss_BLE_CODE_SMP_Pairing_Random</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Random) referenced from mmi.o(.constdata)
 <LI><a href="#[8f]">Prcss_BLE_CODE_SMP_Pairing_Request</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[90]">Prcss_BLE_CODE_SMP_Pairing_Response</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[8e]">Prcss_BLE_CODE_SMP_Reserved</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Reserved) referenced from mmi.o(.constdata)
 <LI><a href="#[99]">Prcss_BLE_CODE_SMP_Security_Request</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Security_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[98]">Prcss_BLE_CODE_SMP_Signing_Information</a> from mmi.o(i.Prcss_BLE_CODE_SMP_Signing_Information) referenced from mmi.o(.constdata)
 <LI><a href="#[b8]">Prcss_L2CAP_CID_AMP_MANAGER_PROTOCOL</a> from mmi.o(i.Prcss_L2CAP_CID_AMP_MANAGER_PROTOCOL) referenced from mmi.o(.constdata)
 <LI><a href="#[b9]">Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL</a> from mmi.o(i.Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL) referenced from mmi.o(.constdata)
 <LI><a href="#[b7]">Prcss_L2CAP_CID_CONNECTIONLESS_CHANNEL</a> from mmi.o(i.Prcss_L2CAP_CID_CONNECTIONLESS_CHANNEL) referenced from mmi.o(.constdata)
 <LI><a href="#[b6]">Prcss_L2CAP_CID_L2CAP_SIGNALING_CHANNEL</a> from mmi.o(i.Prcss_L2CAP_CID_L2CAP_SIGNALING_CHANNEL) referenced from mmi.o(.constdata)
 <LI><a href="#[ba]">Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL</a> from mmi.o(i.Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL) referenced from mmi.o(.constdata)
 <LI><a href="#[b5]">Prcss_L2CAP_CID_NULL_IDENTIFIER</a> from mmi.o(i.Prcss_L2CAP_CID_NULL_IDENTIFIER) referenced from mmi.o(.constdata)
 <LI><a href="#[bb]">Prcss_L2CAP_CID_SECURITY_MANAGER_PROTOCOL</a> from mmi.o(i.Prcss_L2CAP_CID_SECURITY_MANAGER_PROTOCOL) referenced from mmi.o(.constdata)
 <LI><a href="#[9b]">Prcss_OPCODE_ATT_Error_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Error_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[9c]">Prcss_OPCODE_ATT_Exchange_MTU_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Exchange_MTU_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[9d]">Prcss_OPCODE_ATT_Exchange_MTU_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Exchange_MTU_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[b0]">Prcss_OPCODE_ATT_Execute_Write_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Execute_Write_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[b1]">Prcss_OPCODE_ATT_Execute_Write_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Execute_Write_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[a0]">Prcss_OPCODE_ATT_Find_By_Type_Value_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Find_By_Type_Value_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[a1]">Prcss_OPCODE_ATT_Find_By_Type_Value_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Find_By_Type_Value_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[9e]">Prcss_OPCODE_ATT_Find_Information_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Find_Information_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[9f]">Prcss_OPCODE_ATT_Find_Information_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Find_Information_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[b4]">Prcss_OPCODE_ATT_Handle_Value_Confirmation</a> from mmi.o(i.Prcss_OPCODE_ATT_Handle_Value_Confirmation) referenced from mmi.o(.constdata)
 <LI><a href="#[b3]">Prcss_OPCODE_ATT_Handle_Value_Indication</a> from mmi.o(i.Prcss_OPCODE_ATT_Handle_Value_Indication) referenced from mmi.o(.constdata)
 <LI><a href="#[b2]">Prcss_OPCODE_ATT_Handle_Value_Notification</a> from mmi.o(i.Prcss_OPCODE_ATT_Handle_Value_Notification) referenced from mmi.o(.constdata)
 <LI><a href="#[9a]">Prcss_OPCODE_ATT_NULL</a> from mmi.o(i.Prcss_OPCODE_ATT_NULL) referenced 5 times from mmi.o(.constdata)
 <LI><a href="#[ae]">Prcss_OPCODE_ATT_Prepare_Write_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Prepare_Write_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[af]">Prcss_OPCODE_ATT_Prepare_Write_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Prepare_Write_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[a6]">Prcss_OPCODE_ATT_Read_Blob_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_Blob_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[a7]">Prcss_OPCODE_ATT_Read_Blob_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_Blob_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[a2]">Prcss_OPCODE_ATT_Read_By_Type_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_By_Type_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[a3]">Prcss_OPCODE_ATT_Read_By_Type_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_By_Type_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[a8]">Prcss_OPCODE_ATT_Read_Multiple_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_Multiple_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[a9]">Prcss_OPCODE_ATT_Read_Multiple_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_Multiple_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[a4]">Prcss_OPCODE_ATT_Read_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[a5]">Prcss_OPCODE_ATT_Read_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[aa]">Prcss_OPCODE_ATT_Read_by_Group_Type_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_by_Group_Type_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[ab]">Prcss_OPCODE_ATT_Read_by_Group_Type_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Read_by_Group_Type_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[ac]">Prcss_OPCODE_ATT_Write_Request</a> from mmi.o(i.Prcss_OPCODE_ATT_Write_Request) referenced from mmi.o(.constdata)
 <LI><a href="#[ad]">Prcss_OPCODE_ATT_Write_Response</a> from mmi.o(i.Prcss_OPCODE_ATT_Write_Response) referenced from mmi.o(.constdata)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[8]">RTC_BKP_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[6d]">SMEC_LE_CODE_SMP_Pairing_Confirm</a> from mmi.o(i.SMEC_LE_CODE_SMP_Pairing_Confirm) referenced from ll.o(.constdata)
 <LI><a href="#[6e]">SMEC_LE_CODE_SMP_Pairing_Random</a> from mmi.o(i.SMEC_LE_CODE_SMP_Pairing_Random) referenced from ll.o(.constdata)
 <LI><a href="#[6f]">SMEC_LE_SMP_Key_Gen</a> from mmi.o(i.SMEC_LE_SMP_Key_Gen) referenced from ll.o(.constdata)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from systick.o(i.SysTick_Handler) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[21]">SystemInit</a> from system_mm32f032xx_s.o(i.SystemInit) referenced from startup_mm32f032xx_s_keil.o(.text)
 <LI><a href="#[16]">TIM14_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[17]">TIM16_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[18]">TIM17_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[12]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[13]">TIM1_CC_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[14]">TIM2_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[15]">TIM3_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[1c]">UART1_IRQHandler</a> from uart.o(i.UART1_IRQHandler) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[1d]">UART2_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[1f]">USB_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_mm32f032xx_s_keil.o(.text) referenced from startup_mm32f032xx_s_keil.o(RESET)
 <LI><a href="#[22]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_mm32f032xx_s_keil.o(.text)
 <LI><a href="#[23]">fputc</a> from uart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[20]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[22]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(.text)
</UL>
<P><STRONG><a name="[1c9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[bc]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c7]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1ca]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1cb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1cc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1cd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ce]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[be]"></a>SysCtlDelay</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, porting_lltimer.o(.emb_text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_BKP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mm32f032xx_s_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[1cf]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreq
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_bank_get
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_bank_get
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1d1]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d2]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1d3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bd]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c6]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1d6]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1d7]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>ATT_HDL_Rd_NULL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, profile_tab.o(i.ATT_HDL_Rd_NULL))
<BR>[Address Reference Count : 1]<UL><LI> profile_tab.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>ATT_HDL_Wr_NULL</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, profile_tab.o(i.ATT_HDL_Wr_NULL))
<BR>[Address Reference Count : 1]<UL><LI> profile_tab.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>BLEDemo_InitMessage</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, user.o(i.BLEDemo_InitMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BLEDemo_InitMessage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Init
</UL>

<P><STRONG><a name="[ca]"></a>BSP_SPI_BLE_Init</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, porting_spi.o(i.BSP_SPI_BLE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = BSP_SPI_BLE_Init &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_Configure
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CSInternalSelected
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SpiIoMapping
</UL>

<P><STRONG><a name="[cf]"></a>BleApp_Init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, user.o(i.BleApp_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BleApp_Init &rArr; BLEDemo_InitMessage &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDemo_InitMessage
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>BleApp_Main</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, user.o(i.BleApp_Main))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = BleApp_Main &rArr; RT568_FTTestSelection &rArr; RT568_TxTest &rArr; RT568_SleepWakeupTest &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDemo_InitMessage
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>BleMHC_PostEvent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hci.o(i.BleMHC_PostEvent))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBLE_CmdTimer
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Exchange_MTU_Response
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Exchange_MTU_Request
</UL>

<P><STRONG><a name="[19e]"></a>BleTxFIFOAddr_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_phy.o(i.BleTxFIFOAddr_Get))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2BYT_SetTx_Isr
</UL>

<P><STRONG><a name="[d2]"></a>Ble_EC_Chk_Isr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ll.o(i.Ble_EC_Chk_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Ble_EC_Chk_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[d4]"></a>Ble_Kernel_Root</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, kernel.o(i.Ble_Kernel_Root))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Ble_Kernel_Root &rArr; checkBLE_CmdTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBLE_CmdTimer
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rls_L2CAP_Buf
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Root
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CheckConnExist
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Root
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Root
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Root
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckValid_L2CAP_Buf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleMHC_PostEvent
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMsgQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>Ble_SW_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, rf_phy.o(i.Ble_SW_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_initial
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelInit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initL2CAP
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHCI
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLEsw
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clearBLE_CmdTimer
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initInt
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Header_Rdy_intOn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WTR_intOn
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLL
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[14e]"></a>CheckMsgBlk_L2_wSizeUsed_Isr</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, kernel.o(i.CheckMsgBlk_L2_wSizeUsed_Isr))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[d5]"></a>CheckMsgQueue</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kernel.o(i.CheckMsgQueue))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
</UL>

<P><STRONG><a name="[da]"></a>CheckValid_L2CAP_Buf</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, l2cap.o(i.CheckValid_L2CAP_Buf))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
</UL>

<P><STRONG><a name="[1c3]"></a>ChipId_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_phy.o(i.ChipId_Get))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, spi.o(i.DMA1_Channel2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel2_3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, spi.o(i.DMA1_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA1_Channel4_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[1ae]"></a>DMA_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_dma.o(i.DMA_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>DMA_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_Configure
</UL>

<P><STRONG><a name="[ee]"></a>DMA_Config</STRONG> (Thumb, 92 bytes, Stack size 56 bytes, uart.o(i.DMA_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = DMA_Config &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMACmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[f0]"></a>DMA_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_dma.o(i.DMA_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_Configure
</UL>

<P><STRONG><a name="[f5]"></a>DMA_Enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart.o(i.DMA_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1af]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_dma.o(i.DMA_GetCurrDataCounter))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[ec]"></a>DMA_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_5_IRQHandler
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_3_IRQHandler
</UL>

<P><STRONG><a name="[1a6]"></a>DMA_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_dma.o(i.DMA_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_Configure
</UL>

<P><STRONG><a name="[f2]"></a>DMA_Init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hal_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_Configure
</UL>

<P><STRONG><a name="[f1]"></a>DMA_StructInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_dma.o(i.DMA_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_Configure
</UL>

<P><STRONG><a name="[6c]"></a>ECHC_LE_Ctrl_Pkt</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, ll.o(i.ECHC_LE_Ctrl_Pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = ECHC_LE_Ctrl_Pkt &rArr; LL_smp_SKD_IV_genIn &rArr; smpAES_inInv &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_inInv
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_smp_SKD_IV_genIn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, porting_misc.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = EXTI4_15_IRQHandler &rArr; LL_GPIO_Isr &rArr; LLWTR_Isr &rArr; LL_Buffer_To_FIFO_Isr &rArr; RF_TxFIFO_LeData_set &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Isr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[fe]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>EXTI_GetITStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hal_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[101]"></a>EXTI_Init</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, hal_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exEXTI_LineDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntEnable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
</UL>

<P><STRONG><a name="[15b]"></a>EXTI_LineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, hal_exti.o(i.EXTI_LineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_LineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntEnable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
</UL>

<P><STRONG><a name="[127]"></a>ErrorEntry</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, kernel.o(i.ErrorEntry))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[104]"></a>FreeMsgBlk</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kernel.o(i.FreeMsgBlk))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Root
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Root
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Root
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Root
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Request
</UL>

<P><STRONG><a name="[d3]"></a>FreeMsgBlk_Isr</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kernel.o(i.FreeMsgBlk_Isr))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Rx2Hc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Buffer_wAck_Isr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_EC_Chk_Isr
</UL>

<P><STRONG><a name="[153]"></a>FreeMsgBlks</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, kernel.o(i.FreeMsgBlks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FreeMsgBlks
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO
</UL>

<P><STRONG><a name="[118]"></a>FreeMsgBlks_Isr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, kernel.o(i.FreeMsgBlks_Isr))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Rx2Hc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTRFIFOGet_Isr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHeaderRdy_Isr
</UL>

<P><STRONG><a name="[160]"></a>GPIO_Init</STRONG> (Thumb, 134 bytes, Stack size 20 bytes, hal_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioResetInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioPinInit
</UL>

<P><STRONG><a name="[1a4]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hal_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[100]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioReset
</UL>

<P><STRONG><a name="[162]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioReset
</UL>

<P><STRONG><a name="[15f]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioResetInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioPinInit
</UL>

<P><STRONG><a name="[107]"></a>GetMsgBlk</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, kernel.o(i.GetMsgBlk))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Le_Long_Term_Key_Req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Encrypt_Key_Refresh_Complete
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Encrypt_Change
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Status
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Le_PHY_Update_Complete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Le_Data_Length_Change
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Encrypt_Change
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO_smp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_ERR_CODE_Unknown_Hci_Command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_ERR_CODE_Invalid_Lmp_Parameters
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Set_Event_Mask_Page_2
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Reset
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_rssi
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Local_Ver_Info
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Local_Supported_Feat
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Local_Supported_Cmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_BD_Addr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Start_encryption
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_scan_param
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_scan_enable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Scan_Response_Data
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Random_Address
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Event_Mask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Default_Phy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Data_Length
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Advertise_Enable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Adv_Param
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Adv_Data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Rmv_Device_from_White_List
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_ch_map
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_White_List_Size
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Phy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Local_Supported_Feat
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Buffer_Size
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Rand
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Long_term_key_req_reply
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Long_term_key_req_neg_reply
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Encrypt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Ctrl_Pkt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Conn_update
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Clear_White_List
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Add_Device_to_White_List
</UL>

<P><STRONG><a name="[fb]"></a>GetMsgBlk_Isr</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kernel.o(i.GetMsgBlk_Isr))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_CODE_SMP_Pairing_Random
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Tmr_FIFO_ADVrpt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT_Isr
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EventCounter_Map_Upd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO_smp_Isr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Start_encryption
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Rand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Long_term_key_req_reply
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Encrypt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHC_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[141]"></a>GetMsgBlk_L1_wSize_Isr</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, kernel.o(i.GetMsgBlk_L1_wSize_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetMsgBlk_L1_wSize_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTRFIFOGet_Isr
</UL>

<P><STRONG><a name="[10f]"></a>GetMsgBlk_L2_wSize</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, kernel.o(i.GetMsgBlk_L2_wSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetMsgBlk_L2_wSize
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Request
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Failed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Confirm
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassEC_BLE_CODE_SMP
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Set_Event_Mask
</UL>

<P><STRONG><a name="[db]"></a>HCI_Root</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hci.o(i.HCI_Root))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCI_Root
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvMsgBlk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
</UL>

<P><STRONG><a name="[27]"></a>HCLL_Disconnect</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, ll.o(i.HCLL_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HCLL_Disconnect &rArr; LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>HCLL_Host_Buffer_Size</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_Host_Buffer_Size))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>HCLL_Host_Num_of_Completed_Packets</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_Host_Num_of_Completed_Packets))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>HCLL_LE_ACL_Data_Pkt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_ACL_Data_Pkt))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>HCLL_LE_ACL_Data_Pkt_Extend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_ACL_Data_Pkt_Extend))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>HCLL_LE_Add_Device_to_White_List</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Add_Device_to_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCLL_LE_Add_Device_to_White_List &rArr; Knl_MemComp
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>HCLL_LE_Clear_White_List</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Clear_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Clear_White_List
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>HCLL_LE_Conn_update</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, ll.o(i.HCLL_LE_Conn_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HCLL_LE_Conn_update &rArr; LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Fwd
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>HCLL_LE_Create_Conn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Create_Conn))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>HCLL_LE_Create_conn_cancel</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Create_conn_cancel))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>HCLL_LE_Ctrl_Pkt</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Ctrl_Pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCLL_LE_Ctrl_Pkt &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CheckConnExist
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>HCLL_LE_Encrypt</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCLL_LE_Encrypt
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlkEC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>HCLL_LE_Long_term_key_req_neg_reply</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ll.o(i.HCLL_LE_Long_term_key_req_neg_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HCLL_LE_Long_term_key_req_neg_reply &rArr; LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>HCLL_LE_Long_term_key_req_reply</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Long_term_key_req_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCLL_LE_Long_term_key_req_reply
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlkEC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>HCLL_LE_Rand</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCLL_LE_Rand
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlkEC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>HCLL_LE_Read_Adv_Ch_Tx_Pwr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Read_Adv_Ch_Tx_Pwr))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>HCLL_LE_Read_Buffer_Size</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Read_Buffer_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Read_Buffer_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>HCLL_LE_Read_Local_Supported_Feat</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Read_Local_Supported_Feat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Read_Local_Supported_Feat
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>HCLL_LE_Read_Phy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Read_Phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Read_Phy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>HCLL_LE_Read_Remote_Used_Feat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Read_Remote_Used_Feat))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCLL_LE_Read_Remote_Used_Feat &rArr; LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>HCLL_LE_Read_White_List_Size</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Read_White_List_Size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Read_White_List_Size
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>HCLL_LE_Read_ch_map</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Read_ch_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCLL_LE_Read_ch_map
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>HCLL_LE_Read_supported_states</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Read_supported_states))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>HCLL_LE_Receiver_test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Receiver_test))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>HCLL_LE_Remote_conn_param_req_neg_reply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Remote_conn_param_req_neg_reply))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>HCLL_LE_Remote_conn_param_req_reply</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Remote_conn_param_req_reply))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>HCLL_LE_Rmv_Device_from_White_List</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Rmv_Device_from_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCLL_LE_Rmv_Device_from_White_List &rArr; Knl_MemComp
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>HCLL_LE_Set_Adv_Data</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Set_Adv_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Set_Adv_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>HCLL_LE_Set_Adv_Param</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Set_Adv_Param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCLL_LE_Set_Adv_Param
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>HCLL_LE_Set_Advertise_Enable</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, ll.o(i.HCLL_LE_Set_Advertise_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCLL_LE_Set_Advertise_Enable
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetSlaveFreeConnID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>HCLL_LE_Set_Data_Length</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Set_Data_Length))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCLL_LE_Set_Data_Length &rArr; LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>HCLL_LE_Set_Default_Phy</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Set_Default_Phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCLL_LE_Set_Default_Phy
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>HCLL_LE_Set_Event_Mask</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Set_Event_Mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Set_Event_Mask
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>HCLL_LE_Set_Host_Ch_Classification</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Set_Host_Ch_Classification))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>HCLL_LE_Set_Phy</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Set_Phy))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCLL_LE_Set_Phy &rArr; LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Status
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Le_PHY_Update_Complete
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>HCLL_LE_Set_Random_Address</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Set_Random_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Set_Random_Address
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>HCLL_LE_Set_Scan_Response_Data</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Set_Scan_Response_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Set_Scan_Response_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>HCLL_LE_Set_scan_enable</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ll.o(i.HCLL_LE_Set_scan_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_LE_Set_scan_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>HCLL_LE_Set_scan_param</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, ll.o(i.HCLL_LE_Set_scan_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HCLL_LE_Set_scan_param
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>HCLL_LE_Start_encryption</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ll.o(i.HCLL_LE_Start_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCLL_LE_Start_encryption
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlkEC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>HCLL_LE_Test_end</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Test_end))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>HCLL_LE_Transmitter_test</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_LE_Transmitter_test))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>HCLL_Read_BD_Addr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ll.o(i.HCLL_Read_BD_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_Read_BD_Addr
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>HCLL_Read_Le_Host_Support</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_Read_Le_Host_Support))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>HCLL_Read_Local_Supported_Cmd</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ll.o(i.HCLL_Read_Local_Supported_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_Read_Local_Supported_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>HCLL_Read_Local_Supported_Feat</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ll.o(i.HCLL_Read_Local_Supported_Feat))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_Read_Local_Supported_Feat
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>HCLL_Read_Local_Ver_Info</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ll.o(i.HCLL_Read_Local_Ver_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_Read_Local_Ver_Info
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>HCLL_Read_Remote_Ver_Info</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ll.o(i.HCLL_Read_Remote_Ver_Info))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HCLL_Read_Remote_Ver_Info &rArr; LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Status
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>HCLL_Read_Transmit_Pwr_Level</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_Read_Transmit_Pwr_Level))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>HCLL_Read_authen_payload_timeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_Read_authen_payload_timeout))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>HCLL_Read_buffer_size</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_Read_buffer_size))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>HCLL_Read_rssi</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, ll.o(i.HCLL_Read_rssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_Read_rssi
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>HCLL_Reset</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll.o(i.HCLL_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>HCLL_Set_Ctrler_to_Host_Flow_Ctrl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_Set_Ctrler_to_Host_Flow_Ctrl))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>HCLL_Set_Event_Mask</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, ll.o(i.HCLL_Set_Event_Mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HCLL_Set_Event_Mask &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_L2_wSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>HCLL_Set_Event_Mask_Page_2</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ll.o(i.HCLL_Set_Event_Mask_Page_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HCLL_Set_Event_Mask_Page_2
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>HCLL_Write_Le_Host_Support</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_Write_Le_Host_Support))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>HCLL_Write_authen_payload_timeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ll.o(i.HCLL_Write_authen_payload_timeout))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>HSPF_Att_Read</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, host.o(i.HSPF_Att_Read))
<BR>[Address Reference Count : 1]<UL><LI> host.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>HSPF_Att_Write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, host.o(i.HSPF_Att_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HSPF_Att_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> host.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>Host_Root</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, host.o(i.Host_Root))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Host_Root
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvMsgBlk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
</UL>

<P><STRONG><a name="[e6]"></a>KernelInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, kernel.o(i.KernelInit))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
</UL>

<P><STRONG><a name="[16b]"></a>Knl_CodeComp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kernel.o(i.Knl_CodeComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Knl_CodeComp
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Le_Long_Term_Key_Req
</UL>

<P><STRONG><a name="[10c]"></a>Knl_CodeCpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kernel.o(i.Knl_CodeCpy))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLEsmp_Re
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Le_Long_Term_Key_Req
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initHCI
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLL
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReleaseConnID
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Remote_Ver_Info
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Local_Ver_Info
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Local_Supported_Feat
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Local_Supported_Cmd
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Advertise_Enable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Adv_Param
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Remote_Used_Feat
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Local_Supported_Feat
</UL>

<P><STRONG><a name="[1c8]"></a>Knl_CodeCpyInv_Isr</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, kernel.o(i.Knl_CodeCpyInv_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Knl_CodeCpyInv_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpC1
</UL>

<P><STRONG><a name="[113]"></a>Knl_CodeCpy_Isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kernel.o(i.Knl_CodeCpy_Isr))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpC1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_SMP_Key_Gen
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Set_TxPowerLevel_Isr
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_smp_SKD_IV_genIn
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReleaseConnID_Isr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Rand
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_CCM_Manual
</UL>

<P><STRONG><a name="[109]"></a>Knl_MemComp</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kernel.o(i.Knl_MemComp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Knl_MemComp
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Prepare_Write_Request
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Le_Long_Term_Key_Req
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Rmv_Device_from_White_List
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Conn_update
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Add_Device_to_White_List
</UL>

<P><STRONG><a name="[14c]"></a>Knl_MemComp_Isr</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kernel.o(i.Knl_MemComp_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Knl_MemComp_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_CODE_SMP_Pairing_Random
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_cmpFIFO_WhiteList
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_cmpFIFO_BDAddr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[de]"></a>Knl_MemCpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kernel.o(i.Knl_MemCpy))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Prepare_Write_Request
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Execute_Write_Request
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_BleDeviceAddr
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassEC_BLE_CODE_SMP
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_LE_ACL_Data_Pkt
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Le_Conn_Complete
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Encrypt_Change
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Cmd_Complete
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RfChRemap
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO_smp_Isr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO_smp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_BD_Addr
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Start_encryption
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_scan_param
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Scan_Response_Data
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Random_Address
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Data_Length
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Advertise_Enable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Adv_Param
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Adv_Data
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_ch_map
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Rand
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Long_term_key_req_reply
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Encrypt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Ctrl_Pkt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Conn_update
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Add_Device_to_White_List
</UL>

<P><STRONG><a name="[168]"></a>Knl_MemCpyInv</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, kernel.o(i.Knl_MemCpyInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Knl_MemCpyInv
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpPasskey_set
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_SMP_Isr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Confirm
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_SMP
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Le_Long_Term_Key_Req
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Encrypt_Change
</UL>

<P><STRONG><a name="[19a]"></a>Knl_MemCpyInv_Isr</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, kernel.o(i.Knl_MemCpyInv_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Knl_MemCpyInv_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpC1
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_outInv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_inInv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_CODE_SMP_Pairing_Random
</UL>

<P><STRONG><a name="[10a]"></a>Knl_MemCpy_Fwd</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, kernel.o(i.Knl_MemCpy_Fwd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Knl_MemCpy_Fwd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Conn_update
</UL>

<P><STRONG><a name="[f6]"></a>Knl_MemCpy_Isr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kernel.o(i.Knl_MemCpy_Isr))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpS1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_SMP_Key_Gen
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Tmr_FIFO_ADVrpt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT_Isr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Rx2Hc
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTRFIFOGet_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimerFIFOGetSend_Isr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Start_encryption
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_CCM_Manual
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHC_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[d8]"></a>L2CAP_Root</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, l2cap.o(i.L2CAP_Root))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = L2CAP_Root
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvMsgBlk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
</UL>

<P><STRONG><a name="[70]"></a>LLEC_LE_CCM_Manual</STRONG> (Thumb, 452 bytes, Stack size 72 bytes, ll.o(i.LLEC_LE_CCM_Manual))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LLEC_LE_CCM_Manual &rArr; smpAES_in_key &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy_Isr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_key
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_PlainText
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_En
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>LLEC_LE_Encrypt</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ll.o(i.LLEC_LE_Encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LLEC_LE_Encrypt &rArr; smpAES_inInv &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_outInv
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_inInv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>LLEC_LE_Long_term_key_req_reply</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ll.o(i.LLEC_LE_Long_term_key_req_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = LLEC_LE_Long_term_key_req_reply &rArr; smpAES_inInv &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_inInv
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>LLEC_LE_Rand</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, ll.o(i.LLEC_LE_Rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = LLEC_LE_Rand &rArr; smpAES_inInv &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_inInv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>LLEC_LE_Start_encryption</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ll.o(i.LLEC_LE_Start_encryption))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = LLEC_LE_Start_encryption &rArr; LL_smp_SKD_IV_genIn &rArr; smpAES_inInv &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_smp_SKD_IV_genIn
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>LLHC_ERR_CODE_Invalid_Lmp_Parameters</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll.o(i.LLHC_ERR_CODE_Invalid_Lmp_Parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LLHC_ERR_CODE_Invalid_Lmp_Parameters
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>LLHC_ERR_CODE_Unknown_Hci_Command</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll.o(i.LLHC_ERR_CODE_Unknown_Hci_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LLHC_ERR_CODE_Unknown_Hci_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>LLHC_LE_Ctrl_Pkt</STRONG> (Thumb, 820 bytes, Stack size 24 bytes, ll.o(i.LLHC_LE_Ctrl_Pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LLHC_LE_Ctrl_Pkt &rArr; LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlkEC
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Le_PHY_Update_Complete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Le_Data_Length_Change
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Encrypt_Change
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>LLHeaderRdy_Isr</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, ll.o(i.LLHeaderRdy_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LLHeaderRdy_Isr &rArr; SPI_PDMA_SetRx_Isr &rArr; SPIx_DMA_RxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetRx_Isr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlks_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Isr
</UL>

<P><STRONG><a name="[1c0]"></a>LLTimeline_Get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rf_phy.o(i.LLTimeline_Get))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBLE_CmdTimer
</UL>

<P><STRONG><a name="[11a]"></a>LLTimerFIFOGetSend_Isr</STRONG> (Thumb, 266 bytes, Stack size 24 bytes, ll.o(i.LLTimerFIFOGetSend_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = LLTimerFIFOGetSend_Isr &rArr; LLWTRFIFOGet_Isr &rArr; SPI_PDMA_SetRx_Isr &rArr; SPIx_DMA_RxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_LeData_wIdx_set
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTRFIFOGet_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Isr
</UL>

<P><STRONG><a name="[11e]"></a>LLTimer_Isr</STRONG> (Thumb, 3874 bytes, Stack size 48 bytes, ll.o(i.LLTimer_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = LLTimer_Isr &rArr; LL_TmrBlk_Rls_NxtIntvl &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_waitFinish
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ErrorEntry
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannel_BLE
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_reset_phy_fsm_Isr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WTR_intOn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WTR_intOff
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WTR_EnChk
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_ADVaddr_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_ADVData_set
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxAutoAckOn
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxAutoAckOff
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_set_ISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SymbolRate_Patch_1M_2M
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Set_TxPowerLevel_Isr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RxLengthLimit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerSaving_En_Isr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PLL_VCO_Bank_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_LE_HeaderStsLen_Tx
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CRCInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CCM_AES_Mode_set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxEnter_Isr
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TmrBlk_Rls_Pair
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TmrBlk_Rls_NxtIntvl
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TmrBlk_Rls
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TmrBlk_Pt_PairRst
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SvPrToutAccu_Incr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Slv_Win_Width_Incr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxEnter_Isr
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReleaseConnID_Isr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgBlk_LL_conn_Para_Rls
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EventCounter_Map_Upd
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_TmrRefUpd_Isr
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_EC_Chk_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Isr
</UL>

<P><STRONG><a name="[13a]"></a>LLTimer_TmrRefUpd_Isr</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, ll.o(i.LLTimer_TmrRefUpd_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LLTimer_TmrRefUpd_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[11d]"></a>LLWTRFIFOGet_Isr</STRONG> (Thumb, 582 bytes, Stack size 24 bytes, ll.o(i.LLWTRFIFOGet_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LLWTRFIFOGet_Isr &rArr; SPI_PDMA_SetRx_Isr &rArr; SPIx_DMA_RxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_waitFinish
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetRx_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_L1_wSize_Isr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlks_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimerFIFOGetSend_Isr
</UL>

<P><STRONG><a name="[142]"></a>LLWTR_Buffer_wAck_Isr</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ll.o(i.LLWTR_Buffer_wAck_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LLWTR_Buffer_wAck_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[143]"></a>LLWTR_Isr</STRONG> (Thumb, 2274 bytes, Stack size 32 bytes, ll.o(i.LLWTR_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = LLWTR_Isr &rArr; LL_Buffer_To_FIFO_Isr &rArr; RF_TxFIFO_LeData_set &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_waitFinish
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetRx_Isr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx_Isr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp_Isr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlks_Isr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk_Isr
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMsgBlk_L2_wSizeUsed_Isr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_reset_phy_fsm_Isr
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_ADVaddr_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_ADVData_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxAutoAckOff
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_LE_HeaderStsLen_Tx
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Get_LastRssi
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CRCchk
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CCM_AES_Mode_set
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_cmpFIFO_WhiteList
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_cmpFIFO_BDAddr
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Tmr_FIFO_ADVrpt
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Queue_To_Buffer_Isr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Rx2Hc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_MDset
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Buffer_wAck_Isr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTRFIFOGet_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Isr
</UL>

<P><STRONG><a name="[144]"></a>LLWTR_MDset</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, ll.o(i.LLWTR_MDset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LLWTR_MDset
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[149]"></a>LLWTR_Rx2Hc</STRONG> (Thumb, 892 bytes, Stack size 32 bytes, ll.o(i.LLWTR_Rx2Hc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LLWTR_Rx2Hc
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlks_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlks_Isr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[147]"></a>LL_Buffer_To_FIFO_Isr</STRONG> (Thumb, 720 bytes, Stack size 32 bytes, ll.o(i.LL_Buffer_To_FIFO_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = LL_Buffer_To_FIFO_Isr &rArr; RF_TxFIFO_LeData_set &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_LeData_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_LE_HeaderStsLen_Tx
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CCM_AES_Mode_set
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlkEC
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_TmrRefUpd_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[dd]"></a>LL_CheckConnExist</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ll.o(i.LL_CheckConnExist))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_BleDeviceAddr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO_smp
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[152]"></a>LL_Data2ConnTxFIFO</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, ll.o(i.LL_Data2ConnTxFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CheckConnExist
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_L2_wSize
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlks
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
</UL>

<P><STRONG><a name="[154]"></a>LL_Data2ConnTxFIFO_smp</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ll.o(i.LL_Data2ConnTxFIFO_smp))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_Data2ConnTxFIFO_smp
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CheckConnExist
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_SMP
</UL>

<P><STRONG><a name="[155]"></a>LL_Data2ConnTxFIFO_smp_Isr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ll.o(i.LL_Data2ConnTxFIFO_smp_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_Data2ConnTxFIFO_smp_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_SMP_Isr
</UL>

<P><STRONG><a name="[13c]"></a>LL_EventCounter_Map_Upd</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, ll.o(i.LL_EventCounter_Map_Upd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_EventCounter_Map_Upd
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[ff]"></a>LL_GPIO_Isr</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, ll.o(i.LL_GPIO_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = LL_GPIO_Isr &rArr; LLWTR_Isr &rArr; LL_Buffer_To_FIFO_Isr &rArr; RF_TxFIFO_LeData_set &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx_Isr
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_DC_Rstr_Isr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimerFIFOGetSend_Isr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHeaderRdy_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>LL_GetSlaveFreeConnID</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ll.o(i.LL_GetSlaveFreeConnID))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Advertise_Enable
</UL>

<P><STRONG><a name="[12f]"></a>LL_MsgBlk_LL_conn_Para_Rls</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ll.o(i.LL_MsgBlk_LL_conn_Para_Rls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_MsgBlk_LL_conn_Para_Rls
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[105]"></a>LL_Msg_CTRL_PKT</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, ll.o(i.LL_Msg_CTRL_PKT))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLL_LL_Enc_Req
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Remote_Ver_Info
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Phy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Data_Length
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Remote_Used_Feat
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Long_term_key_req_neg_reply
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Conn_update
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Disconnect
</UL>

<P><STRONG><a name="[fc]"></a>LL_Msg_CTRL_PKT_Isr</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, ll.o(i.LL_Msg_CTRL_PKT_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LL_Msg_CTRL_PKT_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Start_encryption
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Long_term_key_req_reply
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHC_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[115]"></a>LL_Msg_Event_Encrypt_Change</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll.o(i.LL_Msg_Event_Encrypt_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_Msg_Event_Encrypt_Change
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[116]"></a>LL_Msg_Event_Le_Data_Length_Change</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ll.o(i.LL_Msg_Event_Le_Data_Length_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_Msg_Event_Le_Data_Length_Change
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[10e]"></a>LL_Msg_Event_Le_PHY_Update_Complete</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ll.o(i.LL_Msg_Event_Le_PHY_Update_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_Msg_Event_Le_PHY_Update_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Phy
</UL>

<P><STRONG><a name="[106]"></a>LL_Msg_Event_Status</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ll.o(i.LL_Msg_Event_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_Msg_Event_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Remote_Ver_Info
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Phy
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Remote_Used_Feat
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Conn_update
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Disconnect
</UL>

<P><STRONG><a name="[146]"></a>LL_Queue_To_Buffer_Isr</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, ll.o(i.LL_Queue_To_Buffer_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_Queue_To_Buffer_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[157]"></a>LL_ReleaseConnID</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, ll.o(i.LL_ReleaseConnID))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_ReleaseConnID
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLL
</UL>

<P><STRONG><a name="[13e]"></a>LL_ReleaseConnID_Isr</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ll.o(i.LL_ReleaseConnID_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_ReleaseConnID_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[158]"></a>LL_RfChRemap</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ll.o(i.LL_RfChRemap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LL_RfChRemap
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MLL_LL_CHN_Map_Upd
</UL>

<P><STRONG><a name="[d7]"></a>LL_Root</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ll.o(i.LL_Root))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_Root
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RcvMsgBlk
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
</UL>

<P><STRONG><a name="[12e]"></a>LL_RxEnter_Isr</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ll.o(i.LL_RxEnter_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LL_RxEnter_Isr &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[13b]"></a>LL_Slv_Win_Width_Incr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ll.o(i.LL_Slv_Win_Width_Incr))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[12c]"></a>LL_SvPrToutAccu_Incr</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, ll.o(i.LL_SvPrToutAccu_Incr))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[120]"></a>LL_TmrBlk_Pt_PairRst</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ll.o(i.LL_TmrBlk_Pt_PairRst))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[138]"></a>LL_TmrBlk_Rls</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ll.o(i.LL_TmrBlk_Rls))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[137]"></a>LL_TmrBlk_Rls_NxtIntvl</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ll.o(i.LL_TmrBlk_Rls_NxtIntvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = LL_TmrBlk_Rls_NxtIntvl &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_set_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[136]"></a>LL_TmrBlk_Rls_Pair</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, ll.o(i.LL_TmrBlk_Rls_Pair))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TmrBlk_Rls_Pair
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[14f]"></a>LL_Tmr_FIFO_ADVrpt</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, ll.o(i.LL_Tmr_FIFO_ADVrpt))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = LL_Tmr_FIFO_ADVrpt &rArr; SPI_PDMA_SetRx_Isr &rArr; SPIx_DMA_RxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetRx_Isr
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Get_LastRssi
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[130]"></a>LL_TxEnter_Isr</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, ll.o(i.LL_TxEnter_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LL_TxEnter_Isr &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[fa]"></a>LL_smp_SKD_IV_genIn</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ll.o(i.LL_smp_SKD_IV_genIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = LL_smp_SKD_IV_genIn &rArr; smpAES_inInv &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy_Isr
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_key
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_PlainText
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_inInv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_En
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Start_encryption
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHC_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[159]"></a>MCU_GpioIntDisable</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, porting_misc.o(i.MCU_GpioIntDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MCU_GpioIntDisable &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_LineConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepWakeupTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_TxTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RxTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RssiTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_DeepSleepTest
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_16MCLK_Test
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_Reset
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[15d]"></a>MCU_GpioIntEnable</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, porting_misc.o(i.MCU_GpioIntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MCU_GpioIntEnable &rArr; MCU_GpioPinInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_LineConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepWakeupTest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[15e]"></a>MCU_GpioPinInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, porting_misc.o(i.MCU_GpioPinInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MCU_GpioPinInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntEnable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SpiIoMapping
</UL>

<P><STRONG><a name="[161]"></a>MCU_GpioReset</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, porting_misc.o(i.MCU_GpioReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MCU_GpioReset
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_Reset
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Open
</UL>

<P><STRONG><a name="[165]"></a>MCU_GpioResetInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, porting_misc.o(i.MCU_GpioResetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MCU_GpioResetInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_Reset
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Open
</UL>

<P><STRONG><a name="[67]"></a>MEC_HCI_Null</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll.o(i.MEC_HCI_Null))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>MHC_Event_Authen_Payload_Timeout_Expired</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Authen_Payload_Timeout_Expired))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>MHC_Event_Cmd_Complete</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hci.o(i.MHC_Event_Cmd_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MHC_Event_Cmd_Complete &rArr; initBLEsmp_Re
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLEsmp_Re
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>MHC_Event_Cmd_Status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Cmd_Status))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>MHC_Event_Data_Buffer_Overflow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Data_Buffer_Overflow))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>MHC_Event_Disconn_Complete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hci.o(i.MHC_Event_Disconn_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MHC_Event_Disconn_Complete &rArr; initBLEsmp_Re
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLEsmp_Re
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>MHC_Event_Encrypt_Change</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, hci.o(i.MHC_Event_Encrypt_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MHC_Event_Encrypt_Change &rArr; setBLE_ConnTxData_SMP &rArr; LL_Data2ConnTxFIFO_smp
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_SMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>MHC_Event_Encrypt_Key_Refresh_Complete</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, hci.o(i.MHC_Event_Encrypt_Key_Refresh_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MHC_Event_Encrypt_Key_Refresh_Complete
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>MHC_Event_HCI_Raw</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_HCI_Raw))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>MHC_Event_Hardware_Error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Hardware_Error))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>MHC_Event_Le_Adv_Report</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hci.o(i.MHC_Event_Le_Adv_Report))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MHC_Event_Le_Adv_Report
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>MHC_Event_Le_Conn_Complete</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hci.o(i.MHC_Event_Le_Conn_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MHC_Event_Le_Conn_Complete &rArr; PassEC_BLE_CODE_SMP &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLE_AttServParamter
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassEC_BLE_CODE_SMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>MHC_Event_Le_Conn_Update_Complete</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Le_Conn_Update_Complete))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>MHC_Event_Le_Data_Length_Change</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Le_Data_Length_Change))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>MHC_Event_Le_Long_Term_Key_Req</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, hci.o(i.MHC_Event_Le_Long_Term_Key_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MHC_Event_Le_Long_Term_Key_Req &rArr; Knl_MemComp
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeComp
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>MHC_Event_Le_PHY_Update_Complete</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hci.o(i.MHC_Event_Le_PHY_Update_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MHC_Event_Le_PHY_Update_Complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>MHC_Event_Le_Read_Remote_Used_Features_Complete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Le_Read_Remote_Used_Features_Complete))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>MHC_Event_Le_Remote_Conn_param_Req_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Le_Remote_Conn_param_Req_Event))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>MHC_Event_Le_Wait_Passkey_Confrim</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Le_Wait_Passkey_Confrim))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>MHC_Event_Null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Null))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>MHC_Event_Num_Of_Completed_Pckts</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Num_Of_Completed_Pckts))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>MHC_Event_Read_Remote_Ver_Info_Complete</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_Read_Remote_Ver_Info_Complete))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>MHC_Event_STK_Gen_Method</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hci.o(i.MHC_Event_STK_Gen_Method))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>MHC_Evnet_Auth_Status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hci.o(i.MHC_Evnet_Auth_Status))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>MHC_LE_ACL_Data_Pkt</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hci.o(i.MHC_LE_ACL_Data_Pkt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MHC_LE_ACL_Data_Pkt
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>MHC_LE_ACL_Data_Pkt_Extend</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hci.o(i.MHC_LE_ACL_Data_Pkt_Extend))
<BR>[Address Reference Count : 1]<UL><LI> hci.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>MHS_Event_Null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, host.o(i.MHS_Event_Null))
<BR>[Address Reference Count : 1]<UL><LI> host.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>ML2CAP_Event_Null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, l2cap.o(i.ML2CAP_Event_Null))
<BR>[Address Reference Count : 1]<UL><LI> l2cap.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>MLL_HCI_Null</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll.o(i.MLL_HCI_Null))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>MLL_LE_Ctrl_Pkt</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ll.o(i.MLL_LE_Ctrl_Pkt))
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>MLL_LL_CHN_Map_Upd</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ll.o(i.MLL_LL_CHN_Map_Upd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MLL_LL_CHN_Map_Upd &rArr; LL_RfChRemap
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RfChRemap
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>MLL_LL_Enc_Req</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ll.o(i.MLL_LL_Enc_Req))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MLL_LL_Enc_Req &rArr; LL_Msg_CTRL_PKT
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>NVIC_Init</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, hal_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_nvic_config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_InterruptConfigure
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntEnable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
</UL>

<P><STRONG><a name="[169]"></a>PassEC_BLE_CODE_SMP</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, mmi.o(i.PassEC_BLE_CODE_SMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PassEC_BLE_CODE_SMP &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_L2_wSize
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlkEC
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpPasskey_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Random
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Le_Conn_Complete
</UL>

<P><STRONG><a name="[94]"></a>Prcss_BLE_CODE_SMP_Encryption_Information</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Encryption_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prcss_BLE_CODE_SMP_Encryption_Information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>Prcss_BLE_CODE_SMP_Identity_Address_Information</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Identity_Address_Information))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>Prcss_BLE_CODE_SMP_Identity_Information</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Identity_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prcss_BLE_CODE_SMP_Identity_Information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>Prcss_BLE_CODE_SMP_Master_Identification</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Master_Identification))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prcss_BLE_CODE_SMP_Master_Identification
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>Prcss_BLE_CODE_SMP_Pairing_Confirm</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Prcss_BLE_CODE_SMP_Pairing_Confirm &rArr; smpPasskey_set &rArr; PassEC_BLE_CODE_SMP &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_L2_wSize
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpPasskey_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>Prcss_BLE_CODE_SMP_Pairing_Failed</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Prcss_BLE_CODE_SMP_Pairing_Failed &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_L2_wSize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>Prcss_BLE_CODE_SMP_Pairing_Random</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Prcss_BLE_CODE_SMP_Pairing_Random &rArr; PassEC_BLE_CODE_SMP &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassEC_BLE_CODE_SMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>Prcss_BLE_CODE_SMP_Pairing_Request</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Prcss_BLE_CODE_SMP_Pairing_Request &rArr; setBLE_ConnTxData_SMP &rArr; LL_Data2ConnTxFIFO_smp
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_L2_wSize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpPasskey_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_SMP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>Prcss_BLE_CODE_SMP_Pairing_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Pairing_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>Prcss_BLE_CODE_SMP_Reserved</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Reserved))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>Prcss_BLE_CODE_SMP_Security_Request</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Security_Request))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>Prcss_BLE_CODE_SMP_Signing_Information</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, mmi.o(i.Prcss_BLE_CODE_SMP_Signing_Information))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prcss_BLE_CODE_SMP_Signing_Information
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>Prcss_L2CAP_CID_AMP_MANAGER_PROTOCOL</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_L2CAP_CID_AMP_MANAGER_PROTOCOL))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mmi.o(i.Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Command
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>Prcss_L2CAP_CID_CONNECTIONLESS_CHANNEL</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_L2CAP_CID_CONNECTIONLESS_CHANNEL))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>Prcss_L2CAP_CID_L2CAP_SIGNALING_CHANNEL</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_L2CAP_CID_L2CAP_SIGNALING_CHANNEL))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, mmi.o(i.Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>Prcss_L2CAP_CID_NULL_IDENTIFIER</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_L2CAP_CID_NULL_IDENTIFIER))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>Prcss_L2CAP_CID_SECURITY_MANAGER_PROTOCOL</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mmi.o(i.Prcss_L2CAP_CID_SECURITY_MANAGER_PROTOCOL))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prcss_L2CAP_CID_SECURITY_MANAGER_PROTOCOL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>Prcss_OPCODE_ATT_Error_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Error_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>Prcss_OPCODE_ATT_Exchange_MTU_Request</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, mmi.o(i.Prcss_OPCODE_ATT_Exchange_MTU_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = Prcss_OPCODE_ATT_Exchange_MTU_Request &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleMHC_PostEvent
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>Prcss_OPCODE_ATT_Exchange_MTU_Response</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, mmi.o(i.Prcss_OPCODE_ATT_Exchange_MTU_Response))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Prcss_OPCODE_ATT_Exchange_MTU_Response
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleMHC_PostEvent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>Prcss_OPCODE_ATT_Execute_Write_Request</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, mmi.o(i.Prcss_OPCODE_ATT_Execute_Write_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Prcss_OPCODE_ATT_Execute_Write_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_q_att_HDL_PreWr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_TYPE_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>Prcss_OPCODE_ATT_Execute_Write_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Execute_Write_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>Prcss_OPCODE_ATT_Find_By_Type_Value_Request</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, mmi.o(i.Prcss_OPCODE_ATT_Find_By_Type_Value_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = Prcss_OPCODE_ATT_Find_By_Type_Value_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>Prcss_OPCODE_ATT_Find_By_Type_Value_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Find_By_Type_Value_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>Prcss_OPCODE_ATT_Find_Information_Request</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, mmi.o(i.Prcss_OPCODE_ATT_Find_Information_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Prcss_OPCODE_ATT_Find_Information_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_TYPE_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>Prcss_OPCODE_ATT_Find_Information_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Find_Information_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>Prcss_OPCODE_ATT_Handle_Value_Confirmation</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Handle_Value_Confirmation))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>Prcss_OPCODE_ATT_Handle_Value_Indication</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Handle_Value_Indication))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>Prcss_OPCODE_ATT_Handle_Value_Notification</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Handle_Value_Notification))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>Prcss_OPCODE_ATT_NULL</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_NULL))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>Prcss_OPCODE_ATT_Prepare_Write_Request</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, mmi.o(i.Prcss_OPCODE_ATT_Prepare_Write_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Prcss_OPCODE_ATT_Prepare_Write_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkIfBLE_ATT_Chr_Acss_ByUser
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATT_Chr_AcssWr_ByUser
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATTRIBUTE_PERMISSION_Write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_TYPE_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>Prcss_OPCODE_ATT_Prepare_Write_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Prepare_Write_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>Prcss_OPCODE_ATT_Read_Blob_Request</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_Blob_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Prcss_OPCODE_ATT_Read_Blob_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_Value_DynmcLngth
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkIfBLE_ATT_Chr_Acss_ByUser
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATT_Chr_AcssRd_ByUser
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATTRIBUTE_PERMISSION_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_TYPE_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>Prcss_OPCODE_ATT_Read_Blob_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_Blob_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>Prcss_OPCODE_ATT_Read_By_Type_Request</STRONG> (Thumb, 574 bytes, Stack size 56 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_By_Type_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Prcss_OPCODE_ATT_Read_By_Type_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_Value_DynmcLngth
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkIfBLE_ATT_Chr_Acss_ByUser
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATT_Chr_AcssRd_ByUser
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATTRIBUTE_PERMISSION_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_TYPE_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>Prcss_OPCODE_ATT_Read_By_Type_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_By_Type_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>Prcss_OPCODE_ATT_Read_Multiple_Request</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_Multiple_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = Prcss_OPCODE_ATT_Read_Multiple_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>Prcss_OPCODE_ATT_Read_Multiple_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_Multiple_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>Prcss_OPCODE_ATT_Read_Request</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Prcss_OPCODE_ATT_Read_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_L2_wSize
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeMsgBlk
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_Value_DynmcLngth
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkIfBLE_ATT_Chr_Acss_ByUser
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATT_Chr_AcssRd_ByUser
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATTRIBUTE_PERMISSION_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_TYPE_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>Prcss_OPCODE_ATT_Read_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>Prcss_OPCODE_ATT_Read_by_Group_Type_Request</STRONG> (Thumb, 694 bytes, Stack size 56 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_by_Group_Type_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = Prcss_OPCODE_ATT_Read_by_Group_Type_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATTRIBUTE_PERMISSION_Read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_TYPE_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>Prcss_OPCODE_ATT_Read_by_Group_Type_Response</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Read_by_Group_Type_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>Prcss_OPCODE_ATT_Write_Command</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, mmi.o(i.Prcss_OPCODE_ATT_Write_Command))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Prcss_OPCODE_ATT_Write_Command
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkIfBLE_ATT_Chr_Acss_ByUser
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATT_Chr_AcssWr_ByUser
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATTRIBUTE_PERMISSION_Write
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_TYPE_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL
</UL>

<P><STRONG><a name="[ac]"></a>Prcss_OPCODE_ATT_Write_Request</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, mmi.o(i.Prcss_OPCODE_ATT_Write_Request))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = Prcss_OPCODE_ATT_Write_Request &rArr; setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkIfBLE_ATT_Chr_Acss_ByUser
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATT_Chr_AcssWr_ByUser
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_ATTRIBUTE_PERMISSION_Write
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBLE_ATTRIBUTE_TYPE_Size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>Prcss_OPCODE_ATT_Write_Response</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, mmi.o(i.Prcss_OPCODE_ATT_Write_Response))
<BR>[Address Reference Count : 1]<UL><LI> mmi.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_Configure
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioResetInit
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioPinInit
</UL>

<P><STRONG><a name="[1a5]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[15a]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntEnable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[179]"></a>RCC_GetHCLKFreq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_rcc.o(i.RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2Freq
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[17b]"></a>RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_rcc.o(i.RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetPCLK1Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[17c]"></a>RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hal_rcc.o(i.RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[17a]"></a>RCC_GetSysClockFreq</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hal_rcc.o(i.RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKFreq
</UL>

<P><STRONG><a name="[140]"></a>RF_CCM_AES_Mode_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf_phy.o(i.RF_CCM_AES_Mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_CCM_AES_Mode_set &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[124]"></a>RF_CRCInit</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf_phy.o(i.RF_CRCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RF_CRCInit &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[145]"></a>RF_CRCchk</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_phy.o(i.RF_CRCchk))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF_CRCchk &rArr; SPI_1BYT_SetRx_Isr &rArr; SPIx_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[156]"></a>RF_DC_Rstr_Isr</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rf_phy.o(i.RF_DC_Rstr_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF_DC_Rstr_Isr &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Isr
</UL>

<P><STRONG><a name="[17d]"></a>RF_External_Wakeup</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, rf_phy.o(i.RF_External_Wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF_External_Wakeup &rArr; SPI_1BYT_SetRx &rArr; SPIx_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRF_EnterDeepSleep
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepWakeupTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_DeepSleepTest
</UL>

<P><STRONG><a name="[14a]"></a>RF_Get_LastRssi</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, rf_phy.o(i.RF_Get_LastRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RF_Get_LastRssi
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_waitFinish
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Tmr_FIFO_ADVrpt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[e9]"></a>RF_Header_Rdy_intOn</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rf_phy.o(i.RF_Header_Rdy_intOn))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
</UL>

<P><STRONG><a name="[17f]"></a>RF_Init</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, rf_phy.o(i.RF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_waitFinish
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntEnable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBleDeviceParam
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_reset_phy_fsm
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Voltage_Det
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_OriginAddr_set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepWakeupTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_DeepSleepTest
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_Reset
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Open
</UL>

<P><STRONG><a name="[185]"></a>RF_IntReset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_phy.o(i.RF_IntReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_IntReset &rArr; SPI_1BYT_SetTx
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepWakeupTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_DeepSleepTest
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
</UL>

<P><STRONG><a name="[131]"></a>RF_LE_HeaderStsLen_Tx</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rf_phy.o(i.RF_LE_HeaderStsLen_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_LE_HeaderStsLen_Tx &rArr; SPI_2BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[187]"></a>RF_Open</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(i.RF_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RF_Open &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SpiIoMapping
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioResetInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioReset
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>RF_PLL_VCO_Bank_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf_phy.o(i.RF_PLL_VCO_Bank_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_PLL_VCO_Bank_set &rArr; SPI_1BYT_SetTx
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[121]"></a>RF_PowerSaving_En_Isr</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rf_phy.o(i.RF_PowerSaving_En_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RF_PowerSaving_En_Isr &rArr; RF_Voltage_Det &rArr; SPI_1BYT_SetRx &rArr; SPIx_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Voltage_Det
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[126]"></a>RF_RxLengthLimit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf_phy.o(i.RF_RxLengthLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_RxLengthLimit &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[12d]"></a>RF_Set_TxPowerLevel_Isr</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, rf_phy.o(i.RF_Set_TxPowerLevel_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RF_Set_TxPowerLevel_Isr &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[188]"></a>RF_SpiIoMapping</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, porting_misc.o(i.RF_SpiIoMapping))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = RF_SpiIoMapping &rArr; BSP_SPI_BLE_Init &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI_BLE_Init
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGpioWriteReg
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioPinInit
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_Reset
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Open
</UL>

<P><STRONG><a name="[12a]"></a>RF_SymbolRate_Patch_1M_2M</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, rf_phy.o(i.RF_SymbolRate_Patch_1M_2M))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_SymbolRate_Patch_1M_2M &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[18b]"></a>RF_SymbolRate_set</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rf_phy.o(i.RF_SymbolRate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_SymbolRate_set &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
</UL>

<P><STRONG><a name="[e5]"></a>RF_Tmr_Periodic_initial</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, rf_phy.o(i.RF_Tmr_Periodic_initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_waitFinish
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_set_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepWakeupTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepTest
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
</UL>

<P><STRONG><a name="[11f]"></a>RF_Tmr_Periodic_set_ISR</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rf_phy.o(i.RF_Tmr_Periodic_set_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_initial
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TmrBlk_Rls_NxtIntvl
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[134]"></a>RF_TxAutoAckOff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_phy.o(i.RF_TxAutoAckOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_TxAutoAckOff &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[12b]"></a>RF_TxAutoAckOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_phy.o(i.RF_TxAutoAckOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_TxAutoAckOn &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[133]"></a>RF_TxFIFO_ADVData_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_phy.o(i.RF_TxFIFO_ADVData_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RF_TxFIFO_ADVData_set &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[132]"></a>RF_TxFIFO_ADVaddr_set</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_phy.o(i.RF_TxFIFO_ADVaddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RF_TxFIFO_ADVaddr_set &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[151]"></a>RF_TxFIFO_LeData_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rf_phy.o(i.RF_TxFIFO_LeData_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RF_TxFIFO_LeData_set &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
</UL>

<P><STRONG><a name="[11b]"></a>RF_TxFIFO_LeData_wIdx_set</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rf_phy.o(i.RF_TxFIFO_LeData_wIdx_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RF_TxFIFO_LeData_wIdx_set &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimerFIFOGetSend_Isr
</UL>

<P><STRONG><a name="[182]"></a>RF_TxFIFO_OriginAddr_set</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rf_phy.o(i.RF_TxFIFO_OriginAddr_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_TxFIFO_OriginAddr_set &rArr; SPI_2BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[184]"></a>RF_Voltage_Det</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rf_phy.o(i.RF_Voltage_Det))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RF_Voltage_Det &rArr; SPI_1BYT_SetRx &rArr; SPIx_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerSaving_En_Isr
</UL>

<P><STRONG><a name="[13d]"></a>RF_WTR_EnChk</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rf_phy.o(i.RF_WTR_EnChk))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[135]"></a>RF_WTR_intOff</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_phy.o(i.RF_WTR_intOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_WTR_intOff &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[ea]"></a>RF_WTR_intOn</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_phy.o(i.RF_WTR_intOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RF_WTR_intOn &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[14d]"></a>RF_cmpFIFO_BDAddr</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ll.o(i.RF_cmpFIFO_BDAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RF_cmpFIFO_BDAddr &rArr; Knl_MemComp_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[14b]"></a>RF_cmpFIFO_WhiteList</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ll.o(i.RF_cmpFIFO_WhiteList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RF_cmpFIFO_WhiteList &rArr; Knl_MemComp_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[18c]"></a>RT568_16MCLK_Test</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ft_func.o(i.RT568_16MCLK_Test))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RT568_16MCLK_Test &rArr; RT568_SetCmd &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SetCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
</UL>

<P><STRONG><a name="[18e]"></a>RT568_DeepSleepTest</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ft_func.o(i.RT568_DeepSleepTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RT568_DeepSleepTest &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRF_EnterDeepSleep
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IntReset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_External_Wakeup
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
</UL>

<P><STRONG><a name="[d1]"></a>RT568_FTTestSelection</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, user.o(i.RT568_FTTestSelection))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = RT568_FTTestSelection &rArr; RT568_TxTest &rArr; RT568_SleepWakeupTest &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_TxTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RxTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RssiTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_DeepSleepTest
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_16MCLK_Test
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_Reset
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Main
</UL>

<P><STRONG><a name="[190]"></a>RT568_Reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, user.o(i.RT568_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RT568_Reset &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_DelayMs
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SpiIoMapping
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioResetInit
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioReset
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
</UL>

<P><STRONG><a name="[194]"></a>RT568_RssiTest</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, ft_func.o(i.RT568_RssiTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = RT568_RssiTest &rArr; RT568_SetCmd &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_SendData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SetCmd
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_CheckRssiValue
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
</UL>

<P><STRONG><a name="[192]"></a>RT568_RxTest</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ft_func.o(i.RT568_RxTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = RT568_RxTest &rArr; RT568_SetCmd &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SetCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
</UL>

<P><STRONG><a name="[193]"></a>RT568_SleepTest</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ft_func.o(i.RT568_SleepTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RT568_SleepTest &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_initial
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IntReset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_External_Wakeup
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
</UL>

<P><STRONG><a name="[191]"></a>RT568_TxTest</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ft_func.o(i.RT568_TxTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = RT568_TxTest &rArr; RT568_SleepWakeupTest &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepWakeupTest
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SetCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
</UL>

<P><STRONG><a name="[103]"></a>RcvMsgBlk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, kernel.o(i.RcvMsgBlk))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Root
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2CAP_Root
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Host_Root
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Root
</UL>

<P><STRONG><a name="[e0]"></a>Rls_L2CAP_Buf</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, l2cap.o(i.Rls_L2CAP_Buf))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
</UL>

<P><STRONG><a name="[6d]"></a>SMEC_LE_CODE_SMP_Pairing_Confirm</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mmi.o(i.SMEC_LE_CODE_SMP_Pairing_Confirm))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SMEC_LE_CODE_SMP_Pairing_Confirm &rArr; smpC1 &rArr; smpAES_in_key &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpC1
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_SMP_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>SMEC_LE_CODE_SMP_Pairing_Random</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, mmi.o(i.SMEC_LE_CODE_SMP_Pairing_Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = SMEC_LE_CODE_SMP_Pairing_Random &rArr; smpC1 &rArr; smpAES_in_key &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SndMsgBlk_Isr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv_Isr
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemComp_Isr
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMsgBlk_Isr
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpS1
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpC1
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_SMP_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>SMEC_LE_SMP_Key_Gen</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, mmi.o(i.SMEC_LE_SMP_Key_Gen))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = SMEC_LE_SMP_Key_Gen &rArr; smpAES_in_key &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy_Isr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_key
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_PlainText
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_En
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>SPI_1BYT_SetRx</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, porting_spi.o(i.SPI_1BYT_SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_1BYT_SetRx &rArr; SPIx_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_External_Wakeup
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RssiTest
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Voltage_Det
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
</UL>

<P><STRONG><a name="[11c]"></a>SPI_1BYT_SetRx_Isr</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, porting_spi.o(i.SPI_1BYT_SetRx_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_1BYT_SetRx_Isr &rArr; SPIx_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteByte
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Isr
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_outInv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CRCchk
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimerFIFOGetSend_Isr
</UL>

<P><STRONG><a name="[139]"></a>SPI_1BYT_SetTx</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, porting_spi.o(i.SPI_1BYT_SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_1BYT_SetTx
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRF_EnterDeepSleep
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_initial
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IntReset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_External_Wakeup
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_TxTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RxTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RssiTest
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SpiIoMapping
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_reset_phy_fsm
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Voltage_Det
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PowerSaving_En_Isr
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PLL_VCO_Bank_set
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[123]"></a>SPI_1BYT_SetTx_Isr</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, porting_spi.o(i.SPI_1BYT_SetTx_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Isr
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SymbolRate_set
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_outInv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_inInv
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_En
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannel_BLE
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_reset_phy_fsm_Isr
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WTR_intOn
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WTR_intOff
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxAutoAckOn
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxAutoAckOff
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SymbolRate_Patch_1M_2M
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_RxLengthLimit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_DC_Rstr_Isr
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CCM_AES_Mode_set
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxEnter_Isr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxEnter_Isr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[186]"></a>SPI_2BYT_SetTx_Isr</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, porting_spi.o(i.SPI_2BYT_SetTx_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_2BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteByte
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleTxFIFOAddr_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_OriginAddr_set
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_LE_HeaderStsLen_Tx
</UL>

<P><STRONG><a name="[cd]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, hal_spi.o(i.SPI_BiDirectionalLineConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI_BLE_Init
</UL>

<P><STRONG><a name="[cb]"></a>SPI_CSInternalSelected</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_spi.o(i.SPI_CSInternalSelected))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI_BLE_Init
</UL>

<P><STRONG><a name="[1a3]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
</UL>

<P><STRONG><a name="[1a8]"></a>SPI_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_spi.o(i.SPI_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_TxData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_RxData
</UL>

<P><STRONG><a name="[189]"></a>SPI_GPIO_Init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, porting_misc.o(i.SPI_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SpiIoMapping
</UL>

<P><STRONG><a name="[1a2]"></a>SPI_Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, hal_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
</UL>

<P><STRONG><a name="[119]"></a>SPI_PDMA_SetRx_Isr</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, porting_spi.o(i.SPI_PDMA_SetRx_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SPI_PDMA_SetRx_Isr &rArr; SPIx_DMA_RxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteByte
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_RxData
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_outInv
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Tmr_FIFO_ADVrpt
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTRFIFOGet_Isr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHeaderRdy_Isr
</UL>

<P><STRONG><a name="[125]"></a>SPI_PDMA_SetTx</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, porting_spi.o(i.SPI_PDMA_SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_WriteByte
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_TxData
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleTxFIFOAddr_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_initial
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SetCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_key
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_PlainText
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_inInv
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_LeData_wIdx_set
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_LeData_set
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_ADVaddr_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_TxFIFO_ADVData_set
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_set_ISR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Set_TxPowerLevel_Isr
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_CRCInit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TxEnter_Isr
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RxEnter_Isr
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[13f]"></a>SPI_PDMA_waitFinish</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, porting_spi.o(i.SPI_PDMA_waitFinish))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_initial
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SetCmd
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_inInv
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Get_LastRssi
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTRFIFOGet_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[1a1]"></a>SPI_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_Configure
</UL>

<P><STRONG><a name="[cc]"></a>SPIx_Configure</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, spi.o(i.SPIx_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPIx_Configure &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI_BLE_Init
</UL>

<P><STRONG><a name="[ce]"></a>SPIx_DMA_Configure</STRONG> (Thumb, 274 bytes, Stack size 56 bytes, spi.o(i.SPIx_DMA_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_StructInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_TxData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_RxData
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SPI_BLE_Init
</UL>

<P><STRONG><a name="[1a7]"></a>SPIx_DMA_InterruptConfigure</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, spi.o(i.SPIx_DMA_InterruptConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIx_DMA_InterruptConfigure &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_TxData
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_RxData
</UL>

<P><STRONG><a name="[19f]"></a>SPIx_DMA_RxData</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, spi.o(i.SPIx_DMA_RxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SPIx_DMA_RxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMACmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_InterruptConfigure
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetRx_Isr
</UL>

<P><STRONG><a name="[1a0]"></a>SPIx_DMA_TxData</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, spi.o(i.SPIx_DMA_TxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DMACmd
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_InterruptConfigure
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIx_DMA_Configure
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>

<P><STRONG><a name="[19d]"></a>SPIx_ReadWriteByte</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, spi.o(i.SPIx_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIx_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx_Isr
</UL>

<P><STRONG><a name="[19c]"></a>SPIx_WriteByte</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, spi.o(i.SPIx_WriteByte))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetRx_Isr
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_2BYT_SetTx_Isr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx_Isr
</UL>

<P><STRONG><a name="[108]"></a>SndMsgBlk</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, kernel.o(i.SndMsgBlk))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Request
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Failed
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Confirm
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Le_Long_Term_Key_Req
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Encrypt_Key_Refresh_Complete
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Encrypt_Change
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Status
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Le_PHY_Update_Complete
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Le_Data_Length_Change
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_Event_Encrypt_Change
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO_smp
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_ERR_CODE_Unknown_Hci_Command
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_ERR_CODE_Invalid_Lmp_Parameters
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Set_Event_Mask_Page_2
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Set_Event_Mask
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Reset
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_rssi
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Local_Ver_Info
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Local_Supported_Feat
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_Local_Supported_Cmd
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_Read_BD_Addr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_scan_param
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_scan_enable
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Scan_Response_Data
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Random_Address
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Event_Mask
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Default_Phy
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Data_Length
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Advertise_Enable
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Adv_Param
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Set_Adv_Data
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Rmv_Device_from_White_List
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_ch_map
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_White_List_Size
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Phy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Local_Supported_Feat
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Read_Buffer_Size
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Long_term_key_req_neg_reply
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Conn_update
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Clear_White_List
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Add_Device_to_White_List
</UL>

<P><STRONG><a name="[10b]"></a>SndMsgBlkEC</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ll.o(i.SndMsgBlkEC))
<BR><BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassEC_BLE_CODE_SMP
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Buffer_To_FIFO_Isr
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Start_encryption
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Rand
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Long_term_key_req_reply
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Encrypt
</UL>

<P><STRONG><a name="[f8]"></a>SndMsgBlk_Isr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, kernel.o(i.SndMsgBlk_Isr))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_CODE_SMP_Pairing_Random
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Tmr_FIFO_ADVrpt
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Msg_CTRL_PKT_Isr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_MsgBlk_LL_conn_Para_Rls
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EventCounter_Map_Upd
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Start_encryption
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Rand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Long_term_key_req_reply
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Encrypt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHC_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[150]"></a>SndMsgBlks_Isr</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, kernel.o(i.SndMsgBlks_Isr))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Rx2Hc
</UL>

<P><STRONG><a name="[163]"></a>SysTick_DelayMs</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(i.SysTick_DelayMs))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_Reset
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SpiIoMapping
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioReset
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Open
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>SysTick_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, systick.o(i.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Init &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSysClockFreq
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>SystemInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, system_mm32f032xx_s.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClockTo48
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo48
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>UART1_IRQHandler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, uart.o(i.UART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART1_IRQHandler &rArr; UART_TX_Send &rArr; UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exDMA_SetTransmitLen
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exDMA_SetMemoryAddress
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetITStatus
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ClearITPendingBit
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_Send
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Enable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mm32f032xx_s_keil.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>UART1_SendData</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, porting_misc.o(i.UART1_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RssiTest
</UL>

<P><STRONG><a name="[1ad]"></a>UART_ClearITPendingBit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_uart.o(i.UART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1b9]"></a>UART_Cmd</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_uart.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[f3]"></a>UART_DMACmd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_uart.o(i.UART_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[1bb]"></a>UART_GetFlagStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendByte
</UL>

<P><STRONG><a name="[1ac]"></a>UART_GetITStatus</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_uart.o(i.UART_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1b8]"></a>UART_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hal_uart.o(i.UART_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[1b3]"></a>UART_Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, hal_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = UART_Init &rArr; RCC_GetPCLK2Freq &rArr; RCC_GetHCLKFreq &rArr; RCC_GetSysClockFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2Freq
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1Freq
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[1ba]"></a>UART_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendByte
</UL>

<P><STRONG><a name="[1b7]"></a>UART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart.o(i.UART_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[1b0]"></a>UART_TX_Send</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(i.UART_TX_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_TX_Send &rArr; UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1b5]"></a>UART_nvic_config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(i.UART_nvic_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_nvic_config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
</UL>

<P><STRONG><a name="[1b6]"></a>UARTx_Configure</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, uart.o(i.UARTx_Configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = UARTx_Configure &rArr; DMA_Config &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_StructInit
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMACmd
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_nvic_config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Config
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b4]"></a>UartSendByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, uart.o(i.UartSendByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartSendByte
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_Send
</UL>

<P><STRONG><a name="[1bc]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1da]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[c9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEDemo_InitMessage
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Main
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, kernel.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_FTTestSelection
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLHC_LE_Ctrl_Pkt
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCLL_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[1db]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1dc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1dd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[dc]"></a>checkBLE_CmdTimer</STRONG> (Thumb, 126 bytes, Stack size 64 bytes, rffunction.o(i.checkBLE_CmdTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = checkBLE_CmdTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleMHC_PostEvent
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimeline_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
</UL>

<P><STRONG><a name="[176]"></a>chkBLE_ATTRIBUTE_PERMISSION_Read</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rffunction.o(i.chkBLE_ATTRIBUTE_PERMISSION_Read))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_by_Group_Type_Request
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_By_Type_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Blob_Request
</UL>

<P><STRONG><a name="[173]"></a>chkBLE_ATTRIBUTE_PERMISSION_Write</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, rffunction.o(i.chkBLE_ATTRIBUTE_PERMISSION_Write))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Request
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Command
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Prepare_Write_Request
</UL>

<P><STRONG><a name="[177]"></a>chkBLE_ATT_Chr_AcssRd_ByUser</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rffunction.o(i.chkBLE_ATT_Chr_AcssRd_ByUser))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_By_Type_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Blob_Request
</UL>

<P><STRONG><a name="[175]"></a>chkBLE_ATT_Chr_AcssWr_ByUser</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rffunction.o(i.chkBLE_ATT_Chr_AcssWr_ByUser))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Request
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Command
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Prepare_Write_Request
</UL>

<P><STRONG><a name="[1c5]"></a>chkBLE_LL_State_Adv</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll.o(i.chkBLE_LL_State_Adv))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_BleDeviceAddr
</UL>

<P><STRONG><a name="[1c7]"></a>chkBLE_LL_State_Init</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll.o(i.chkBLE_LL_State_Init))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_BleDeviceAddr
</UL>

<P><STRONG><a name="[1c6]"></a>chkBLE_LL_State_Scan</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ll.o(i.chkBLE_LL_State_Scan))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_BleDeviceAddr
</UL>

<P><STRONG><a name="[174]"></a>chkIfBLE_ATT_Chr_Acss_ByUser</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rffunction.o(i.chkIfBLE_ATT_Chr_Acss_ByUser))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Request
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Command
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_By_Type_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Blob_Request
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Prepare_Write_Request
</UL>

<P><STRONG><a name="[eb]"></a>clearBLE_CmdTimer</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, rffunction.o(i.clearBLE_CmdTimer))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
</UL>

<P><STRONG><a name="[17e]"></a>delay_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, porting_lltimer.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtlDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_External_Wakeup
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepWakeupTest
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_TxTest
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_SleepTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RxTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RssiTest
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_DeepSleepTest
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_16MCLK_Test
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SpiIoMapping
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiGpioWriteReg
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Voltage_Det
</UL>

<P><STRONG><a name="[1b1]"></a>exDMA_SetMemoryAddress</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_dma.o(i.exDMA_SetMemoryAddress))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[1b2]"></a>exDMA_SetTransmitLen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_dma.o(i.exDMA_SetTransmitLen))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</UL>

<P><STRONG><a name="[102]"></a>exEXTI_LineDisable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_exti.o(i.exEXTI_LineDisable))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>

<P><STRONG><a name="[23]"></a>fputc</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[171]"></a>getBLE_ATTRIBUTE_TYPE_Size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rffunction.o(i.getBLE_ATTRIBUTE_TYPE_Size))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Request
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Command
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_by_Group_Type_Request
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_By_Type_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Blob_Request
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Prepare_Write_Request
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Find_Information_Request
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Execute_Write_Request
</UL>

<P><STRONG><a name="[178]"></a>getBLE_ATTRIBUTE_Value_DynmcLngth</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, rffunction.o(i.getBLE_ATTRIBUTE_Value_DynmcLngth))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_By_Type_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Blob_Request
</UL>

<P><STRONG><a name="[16a]"></a>initBLE_AttServParamter</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, rffunction.o(i.initBLE_AttServParamter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = initBLE_AttServParamter
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Le_Conn_Complete
</UL>

<P><STRONG><a name="[1c1]"></a>initBLEsmp</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, mmi.o(i.initBLEsmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initBLEsmp &rArr; initBLEsmp_Re
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpPasskey_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLEsmp_Re
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLEsw
</UL>

<P><STRONG><a name="[166]"></a>initBLEsmp_Re</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, mmi.o(i.initBLEsmp_Re))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initBLEsmp_Re
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLEsmp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Disconn_Complete
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Cmd_Complete
</UL>

<P><STRONG><a name="[e3]"></a>initBLEsw</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mmi.o(i.initBLEsw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = initBLEsw &rArr; initBLEsmp &rArr; initBLEsmp_Re
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLEsmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
</UL>

<P><STRONG><a name="[180]"></a>initBleDeviceParam</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, host.o(i.initBleDeviceParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = initBleDeviceParam &rArr; setBLE_BleDeviceAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_BleDeviceAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[e2]"></a>initHCI</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hci.o(i.initHCI))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = initHCI
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
</UL>

<P><STRONG><a name="[e4]"></a>initInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rf_phy.o(i.initInt))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
</UL>

<P><STRONG><a name="[e8]"></a>initL2CAP</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, l2cap.o(i.initL2CAP))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
</UL>

<P><STRONG><a name="[e7]"></a>initLL</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, ll.o(i.initLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = initLL &rArr; LL_ReleaseConnID
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReleaseConnID
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_SW_Init
</UL>

<P><STRONG><a name="[172]"></a>init_q_att_HDL_PreWr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rffunction.o(i.init_q_att_HDL_PreWr))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Execute_Write_Request
</UL>

<P><STRONG><a name="[20]"></a>main</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = main &rArr; BleApp_Main &rArr; RT568_FTTestSelection &rArr; RT568_TxTest &rArr; RT568_SleepWakeupTest &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_Configure
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChipId_Get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ble_Kernel_Root
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Main
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BleApp_Init
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Open
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1c4]"></a>rafael_pll_bank_get</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, rf_phy.o(i.rafael_pll_bank_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rafael_pll_bank_get &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
</UL>

<P><STRONG><a name="[183]"></a>rafael_pll_calibration</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, rf_phy.o(i.rafael_pll_calibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = rafael_pll_calibration &rArr; rafael_pll_bank_get &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IntReset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_reset_phy_fsm
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_bank_get
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SymbolRate_set
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannel_BLE
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_WTR_intOn
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_PLL_VCO_Bank_set
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>

<P><STRONG><a name="[181]"></a>rafael_reset_phy_fsm</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rf_phy.o(i.rafael_reset_phy_fsm))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rafael_reset_phy_fsm &rArr; SPI_1BYT_SetTx
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRF_EnterDeepSleep
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
</UL>

<P><STRONG><a name="[122]"></a>rafael_reset_phy_fsm_Isr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rf_phy.o(i.rafael_reset_phy_fsm_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rafael_reset_phy_fsm_Isr &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLWTR_Isr
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[1c2]"></a>setBLE_BleDeviceAddr</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, ble_cmd.o(i.setBLE_BleDeviceAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setBLE_BleDeviceAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_CheckConnExist
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_LL_State_Scan
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_LL_State_Init
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chkBLE_LL_State_Adv
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBleDeviceParam
</UL>

<P><STRONG><a name="[16e]"></a>setBLE_ConnTxData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rffunction.o(i.setBLE_ConnTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData_ATT_ERROR_RESPONSE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Request
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_by_Group_Type_Request
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_By_Type_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Blob_Request
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Prepare_Write_Request
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Find_Information_Request
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Find_By_Type_Value_Request
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Execute_Write_Request
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Exchange_MTU_Request
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_L2CAP_CID_LE_L2CAP_SIGNALING_CHANNEL
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Request
</UL>

<P><STRONG><a name="[16f]"></a>setBLE_ConnTxData_ATT_ERROR_RESPONSE</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, rffunction.o(i.setBLE_ConnTxData_ATT_ERROR_RESPONSE))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = setBLE_ConnTxData_ATT_ERROR_RESPONSE &rArr; setBLE_ConnTxData &rArr; LL_Data2ConnTxFIFO &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setBLE_ConnTxData
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Write_Request
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_by_Group_Type_Request
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Request
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Multiple_Request
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_By_Type_Request
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Read_Blob_Request
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Prepare_Write_Request
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Find_Information_Request
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Find_By_Type_Value_Request
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_OPCODE_ATT_Execute_Write_Request
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_L2CAP_CID_ATTRIBUTE_PROTOCOL
</UL>

<P><STRONG><a name="[167]"></a>setBLE_ConnTxData_SMP</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, rffunction.o(i.setBLE_ConnTxData_SMP))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setBLE_ConnTxData_SMP &rArr; LL_Data2ConnTxFIFO_smp
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO_smp
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Request
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MHC_Event_Encrypt_Change
</UL>

<P><STRONG><a name="[199]"></a>setBLE_ConnTxData_SMP_Isr</STRONG> (Thumb, 62 bytes, Stack size 72 bytes, rffunction.o(i.setBLE_ConnTxData_SMP_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setBLE_ConnTxData_SMP_Isr &rArr; LL_Data2ConnTxFIFO_smp_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data2ConnTxFIFO_smp_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_CODE_SMP_Pairing_Random
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_CODE_SMP_Pairing_Confirm
</UL>

<P><STRONG><a name="[128]"></a>setChannel_BLE</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rf_phy.o(i.setChannel_BLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setChannel_BLE &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_pll_calibration
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLTimer_Isr
</UL>

<P><STRONG><a name="[18f]"></a>setRF_EnterDeepSleep</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rf_phy.o(i.setRF_EnterDeepSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setRF_EnterDeepSleep &rArr; RF_External_Wakeup &rArr; SPI_1BYT_SetRx &rArr; SPIx_ReadWriteByte
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_External_Wakeup
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rafael_reset_phy_fsm
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_DeepSleepTest
</UL>

<P><STRONG><a name="[112]"></a>smpAES_En</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rf_phy.o(i.smpAES_En))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smpAES_En &rArr; SPI_1BYT_SetTx_Isr
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpS1
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpC1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_SMP_Key_Gen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_smp_SKD_IV_genIn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_CCM_Manual
</UL>

<P><STRONG><a name="[f7]"></a>smpAES_inInv</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rf_phy.o(i.smpAES_inInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = smpAES_inInv &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_waitFinish
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_smp_SKD_IV_genIn
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Rand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Long_term_key_req_reply
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Encrypt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHC_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[111]"></a>smpAES_in_PlainText</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rf_phy.o(i.smpAES_in_PlainText))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = smpAES_in_PlainText &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpS1
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpC1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_SMP_Key_Gen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_smp_SKD_IV_genIn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_CCM_Manual
</UL>

<P><STRONG><a name="[110]"></a>smpAES_in_key</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rf_phy.o(i.smpAES_in_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = smpAES_in_key &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpC1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_SMP_Key_Gen
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_smp_SKD_IV_genIn
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_CCM_Manual
</UL>

<P><STRONG><a name="[f9]"></a>smpAES_out</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rf_phy.o(i.smpAES_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = smpAES_out &rArr; SPI_PDMA_SetRx_Isr &rArr; SPIx_DMA_RxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetRx_Isr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpS1
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpC1
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_SMP_Key_Gen
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Start_encryption
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Rand
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Long_term_key_req_reply
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_CCM_Manual
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECHC_LE_Ctrl_Pkt
</UL>

<P><STRONG><a name="[114]"></a>smpAES_outInv</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rf_phy.o(i.smpAES_outInv))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = smpAES_outInv &rArr; SPI_PDMA_SetRx_Isr &rArr; SPIx_DMA_RxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetRx_Isr
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetTx_Isr
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_1BYT_SetRx_Isr
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LLEC_LE_Encrypt
</UL>

<P><STRONG><a name="[198]"></a>smpC1</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, rffunction.o(i.smpC1))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = smpC1 &rArr; smpAES_in_key &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv_Isr
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpy_Isr
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_CodeCpyInv_Isr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_key
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_PlainText
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_En
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_CODE_SMP_Pairing_Random
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_CODE_SMP_Pairing_Confirm
</UL>

<P><STRONG><a name="[16d]"></a>smpPasskey_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rffunction.o(i.smpPasskey_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initBLEsmp
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Request
</UL>

<P><STRONG><a name="[16c]"></a>smpPasskey_set</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rffunction.o(i.smpPasskey_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = smpPasskey_set &rArr; PassEC_BLE_CODE_SMP &rArr; GetMsgBlk_L2_wSize
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpyInv
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PassEC_BLE_CODE_SMP
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prcss_BLE_CODE_SMP_Pairing_Confirm
</UL>

<P><STRONG><a name="[19b]"></a>smpS1</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, rffunction.o(i.smpS1))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = smpS1 &rArr; smpAES_in_PlainText &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Knl_MemCpy_Isr
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_out
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_in_PlainText
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smpAES_En
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMEC_LE_CODE_SMP_Pairing_Random
</UL>

<P><STRONG><a name="[18a]"></a>spiGpioWriteReg</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, porting_misc.o(i.spiGpioWriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = spiGpioWriteReg &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_SpiIoMapping
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ab]"></a>SetSysClockTo48</STRONG> (Thumb, 194 bytes, Stack size 20 bytes, system_mm32f032xx_s.o(i.SetSysClockTo48))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClockTo48
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[196]"></a>RT568_CheckRssiValue</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ft_func.o(i.RT568_CheckRssiValue))
<BR><BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RssiTest
</UL>

<P><STRONG><a name="[18d]"></a>RT568_SetCmd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ft_func.o(i.RT568_SetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = RT568_SetCmd &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_waitFinish
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PDMA_SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_TxTest
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RxTest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_RssiTest
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_16MCLK_Test
</UL>

<P><STRONG><a name="[197]"></a>RT568_SleepWakeupTest</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ft_func.o(i.RT568_SleepWakeupTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = RT568_SleepWakeupTest &rArr; RF_Init &rArr; Ble_SW_Init &rArr; RF_Tmr_Periodic_initial &rArr; RF_Tmr_Periodic_set_ISR &rArr; SPI_PDMA_SetTx &rArr; SPIx_DMA_TxData &rArr; SPIx_DMA_Configure &rArr; DMA_DeInit &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Tmr_Periodic_initial
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_IntReset
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_External_Wakeup
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntEnable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MCU_GpioIntDisable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RT568_TxTest
</UL>

<P><STRONG><a name="[1aa]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[1bd]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[1bf]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1be]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
